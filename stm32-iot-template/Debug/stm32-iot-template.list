
stm32-iot-template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080050cc  080050cc  000060cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005234  08005234  00006234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800523c  0800523c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005244  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000070  080052b4  00007070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080052b4  00007328  2**0
                  ALLOC
 11 .app_isr_vector 00000000  08005000  08005000  00007070  2**0
                  CONTENTS
 12 .app_text     00000000  08005000  08005000  00007070  2**0
                  CONTENTS
 13 .update_isr_vector 00000000  08008000  08008000  00007070  2**0
                  CONTENTS
 14 .update_text  00000000  08008000  08008000  00007070  2**0
                  CONTENTS
 15 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 16 .debug_info   00012e97  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00002d52  00000000  00000000  00019f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000011f8  00000000  00000000  0001cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000e0a  00000000  00000000  0001de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001b1dd  00000000  00000000  0001ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0001617d  00000000  00000000  00039e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0009de6d  00000000  00000000  0004ffe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  000ede51  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000507c  00000000  00000000  000ede94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000071  00000000  00000000  000f2f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080050b4 	.word	0x080050b4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080050b4 	.word	0x080050b4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <CANBus_Init>:
 */


#include "CANBus.h"

HAL_StatusTypeDef CANBus_Init(CANBus_HandleTypeDef *canbus, CAN_HandleTypeDef *hcan) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
    canbus->hcan = hcan;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	601a      	str	r2, [r3, #0]
    return HAL_CAN_Start(canbus->hcan);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fff4 	bl	8001236 <HAL_CAN_Start>
 800024e:	4603      	mov	r3, r0
}
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <EEPROM_Init>:
 */


#include "EEPROM.h"

HAL_StatusTypeDef EEPROM_Init(EEPROM_HandleTypeDef *eeprom, I2C_HandleTypeDef *hi2c, uint16_t devAddress) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	4613      	mov	r3, r2
 8000264:	80fb      	strh	r3, [r7, #6]
    eeprom->hi2c = hi2c;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	601a      	str	r2, [r3, #0]
    eeprom->devAddress = devAddress;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	88fa      	ldrh	r2, [r7, #6]
 8000270:	809a      	strh	r2, [r3, #4]
    return HAL_OK;
 8000272:	2300      	movs	r3, #0
}
 8000274:	4618      	mov	r0, r3
 8000276:	3714      	adds	r7, #20
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr

0800027e <EEPROM_Write>:

HAL_StatusTypeDef EEPROM_Write(EEPROM_HandleTypeDef *eeprom, uint16_t memAddress, uint8_t *data, uint16_t size) {
 800027e:	b580      	push	{r7, lr}
 8000280:	b088      	sub	sp, #32
 8000282:	af04      	add	r7, sp, #16
 8000284:	60f8      	str	r0, [r7, #12]
 8000286:	607a      	str	r2, [r7, #4]
 8000288:	461a      	mov	r2, r3
 800028a:	460b      	mov	r3, r1
 800028c:	817b      	strh	r3, [r7, #10]
 800028e:	4613      	mov	r3, r2
 8000290:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Write(eeprom->hi2c, eeprom->devAddress, memAddress, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	6818      	ldr	r0, [r3, #0]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	8899      	ldrh	r1, [r3, #4]
 800029a:	897a      	ldrh	r2, [r7, #10]
 800029c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002a0:	9302      	str	r3, [sp, #8]
 80002a2:	893b      	ldrh	r3, [r7, #8]
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2310      	movs	r3, #16
 80002ac:	f001 ff86 	bl	80021bc <HAL_I2C_Mem_Write>
 80002b0:	4603      	mov	r3, r0
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <ESP8266_Init>:


#include "ESP8266.h"
#include <string.h>

HAL_StatusTypeDef ESP8266_Init(ESP8266_HandleTypeDef *esp, UART_HandleTypeDef *huart) {
 80002ba:	b480      	push	{r7}
 80002bc:	b083      	sub	sp, #12
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
 80002c2:	6039      	str	r1, [r7, #0]
    esp->huart = huart;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	683a      	ldr	r2, [r7, #0]
 80002c8:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr

080002d6 <ESP8266_SendCommand>:

HAL_StatusTypeDef ESP8266_SendCommand(ESP8266_HandleTypeDef *esp, const char *cmd) {
 80002d6:	b590      	push	{r4, r7, lr}
 80002d8:	b083      	sub	sp, #12
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
 80002de:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(esp->huart, (uint8_t *)cmd, strlen(cmd), HAL_MAX_DELAY);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681c      	ldr	r4, [r3, #0]
 80002e4:	6838      	ldr	r0, [r7, #0]
 80002e6:	f7ff ff9d 	bl	8000224 <strlen>
 80002ea:	4603      	mov	r3, r0
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002f2:	6839      	ldr	r1, [r7, #0]
 80002f4:	4620      	mov	r0, r4
 80002f6:	f003 fb9d 	bl	8003a34 <HAL_UART_Transmit>
 80002fa:	4603      	mov	r3, r0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bd90      	pop	{r4, r7, pc}

08000304 <ESP8266_ReceiveResponse>:

HAL_StatusTypeDef ESP8266_ReceiveResponse(ESP8266_HandleTypeDef *esp, char *response, uint16_t size) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	4613      	mov	r3, r2
 8000310:	80fb      	strh	r3, [r7, #6]
    return HAL_UART_Receive(esp->huart, (uint8_t *)response, size, HAL_MAX_DELAY);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6818      	ldr	r0, [r3, #0]
 8000316:	88fa      	ldrh	r2, [r7, #6]
 8000318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800031c:	68b9      	ldr	r1, [r7, #8]
 800031e:	f003 fc0c 	bl	8003b3a <HAL_UART_Receive>
 8000322:	4603      	mov	r3, r0
}
 8000324:	4618      	mov	r0, r3
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af02      	add	r7, sp, #8
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	f023 030f 	bic.w	r3, r3, #15
 800033c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000344:	7b7b      	ldrb	r3, [r7, #13]
 8000346:	f043 030c 	orr.w	r3, r3, #12
 800034a:	b2db      	uxtb	r3, r3
 800034c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800034e:	7b7b      	ldrb	r3, [r7, #13]
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	b2db      	uxtb	r3, r3
 8000356:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000358:	7b3b      	ldrb	r3, [r7, #12]
 800035a:	f043 030c 	orr.w	r3, r3, #12
 800035e:	b2db      	uxtb	r3, r3
 8000360:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000362:	7b3b      	ldrb	r3, [r7, #12]
 8000364:	f043 0308 	orr.w	r3, r3, #8
 8000368:	b2db      	uxtb	r3, r3
 800036a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800036c:	bf00      	nop
 800036e:	4825      	ldr	r0, [pc, #148]	@ (8000404 <lcd_send_cmd+0xd8>)
 8000370:	f002 f82b 	bl	80023ca <HAL_I2C_GetError>
 8000374:	4603      	mov	r3, r0
 8000376:	2b04      	cmp	r3, #4
 8000378:	d0f9      	beq.n	800036e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800037a:	bf00      	nop
 800037c:	4821      	ldr	r0, [pc, #132]	@ (8000404 <lcd_send_cmd+0xd8>)
 800037e:	f002 f817 	bl	80023b0 <HAL_I2C_GetState>
 8000382:	4603      	mov	r3, r0
 8000384:	2b20      	cmp	r3, #32
 8000386:	d1f9      	bne.n	800037c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000388:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <lcd_send_cmd+0xdc>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d116      	bne.n	80003be <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000390:	2300      	movs	r3, #0
 8000392:	73fb      	strb	r3, [r7, #15]
 8000394:	e00f      	b.n	80003b6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	3310      	adds	r3, #16
 800039a:	443b      	add	r3, r7
 800039c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	f022 0208 	bic.w	r2, r2, #8
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	3310      	adds	r3, #16
 80003aa:	443b      	add	r3, r7
 80003ac:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	3301      	adds	r3, #1
 80003b4:	73fb      	strb	r3, [r7, #15]
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	d9ec      	bls.n	8000396 <lcd_send_cmd+0x6a>
 80003bc:	e015      	b.n	80003ea <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003be:	2300      	movs	r3, #0
 80003c0:	73bb      	strb	r3, [r7, #14]
 80003c2:	e00f      	b.n	80003e4 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003c4:	7bbb      	ldrb	r3, [r7, #14]
 80003c6:	3310      	adds	r3, #16
 80003c8:	443b      	add	r3, r7
 80003ca:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ce:	7bbb      	ldrb	r3, [r7, #14]
 80003d0:	f042 0208 	orr.w	r2, r2, #8
 80003d4:	b2d2      	uxtb	r2, r2
 80003d6:	3310      	adds	r3, #16
 80003d8:	443b      	add	r3, r7
 80003da:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	3301      	adds	r3, #1
 80003e2:	73bb      	strb	r3, [r7, #14]
 80003e4:	7bbb      	ldrb	r3, [r7, #14]
 80003e6:	2b03      	cmp	r3, #3
 80003e8:	d9ec      	bls.n	80003c4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003ea:	f107 0208 	add.w	r2, r7, #8
 80003ee:	2364      	movs	r3, #100	@ 0x64
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	2304      	movs	r3, #4
 80003f4:	214e      	movs	r1, #78	@ 0x4e
 80003f6:	4803      	ldr	r0, [pc, #12]	@ (8000404 <lcd_send_cmd+0xd8>)
 80003f8:	f001 fde2 	bl	8001fc0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200000c0 	.word	0x200000c0
 8000408:	20000096 	.word	0x20000096

0800040c <lcd_send_data>:

void lcd_send_data (char data) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af02      	add	r7, sp, #8
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f023 030f 	bic.w	r3, r3, #15
 800041c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	011b      	lsls	r3, r3, #4
 8000422:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000424:	7b7b      	ldrb	r3, [r7, #13]
 8000426:	f043 030d 	orr.w	r3, r3, #13
 800042a:	b2db      	uxtb	r3, r3
 800042c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	f043 0309 	orr.w	r3, r3, #9
 8000434:	b2db      	uxtb	r3, r3
 8000436:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000438:	7b3b      	ldrb	r3, [r7, #12]
 800043a:	f043 030d 	orr.w	r3, r3, #13
 800043e:	b2db      	uxtb	r3, r3
 8000440:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000442:	7b3b      	ldrb	r3, [r7, #12]
 8000444:	f043 0309 	orr.w	r3, r3, #9
 8000448:	b2db      	uxtb	r3, r3
 800044a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800044c:	bf00      	nop
 800044e:	4825      	ldr	r0, [pc, #148]	@ (80004e4 <lcd_send_data+0xd8>)
 8000450:	f001 ffbb 	bl	80023ca <HAL_I2C_GetError>
 8000454:	4603      	mov	r3, r0
 8000456:	2b04      	cmp	r3, #4
 8000458:	d0f9      	beq.n	800044e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800045a:	bf00      	nop
 800045c:	4821      	ldr	r0, [pc, #132]	@ (80004e4 <lcd_send_data+0xd8>)
 800045e:	f001 ffa7 	bl	80023b0 <HAL_I2C_GetState>
 8000462:	4603      	mov	r3, r0
 8000464:	2b20      	cmp	r3, #32
 8000466:	d1f9      	bne.n	800045c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000468:	4b1f      	ldr	r3, [pc, #124]	@ (80004e8 <lcd_send_data+0xdc>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d116      	bne.n	800049e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e00f      	b.n	8000496 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	3310      	adds	r3, #16
 800047a:	443b      	add	r3, r7
 800047c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	f022 0208 	bic.w	r2, r2, #8
 8000486:	b2d2      	uxtb	r2, r2
 8000488:	3310      	adds	r3, #16
 800048a:	443b      	add	r3, r7
 800048c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	3301      	adds	r3, #1
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	2b03      	cmp	r3, #3
 800049a:	d9ec      	bls.n	8000476 <lcd_send_data+0x6a>
 800049c:	e015      	b.n	80004ca <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800049e:	2300      	movs	r3, #0
 80004a0:	73bb      	strb	r3, [r7, #14]
 80004a2:	e00f      	b.n	80004c4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004a4:	7bbb      	ldrb	r3, [r7, #14]
 80004a6:	3310      	adds	r3, #16
 80004a8:	443b      	add	r3, r7
 80004aa:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ae:	7bbb      	ldrb	r3, [r7, #14]
 80004b0:	f042 0208 	orr.w	r2, r2, #8
 80004b4:	b2d2      	uxtb	r2, r2
 80004b6:	3310      	adds	r3, #16
 80004b8:	443b      	add	r3, r7
 80004ba:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004be:	7bbb      	ldrb	r3, [r7, #14]
 80004c0:	3301      	adds	r3, #1
 80004c2:	73bb      	strb	r3, [r7, #14]
 80004c4:	7bbb      	ldrb	r3, [r7, #14]
 80004c6:	2b03      	cmp	r3, #3
 80004c8:	d9ec      	bls.n	80004a4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004ca:	f107 0208 	add.w	r2, r7, #8
 80004ce:	2364      	movs	r3, #100	@ 0x64
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2304      	movs	r3, #4
 80004d4:	214e      	movs	r1, #78	@ 0x4e
 80004d6:	4803      	ldr	r0, [pc, #12]	@ (80004e4 <lcd_send_data+0xd8>)
 80004d8:	f001 fd72 	bl	8001fc0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000c0 	.word	0x200000c0
 80004e8:	20000096 	.word	0x20000096

080004ec <lcd_send_string>:

void lcd_send_string (char *str) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	while (*str) {
 80004f4:	e006      	b.n	8000504 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff84 	bl	800040c <lcd_send_data>
	while (*str) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1f4      	bne.n	80004f6 <lcd_send_string+0xa>
	}
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <lcd_init>:
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
}

void lcd_init (void) {
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800051a:	2002      	movs	r0, #2
 800051c:	f7ff ff06 	bl	800032c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000520:	2028      	movs	r0, #40	@ 0x28
 8000522:	f7ff ff03 	bl	800032c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000526:	200c      	movs	r0, #12
 8000528:	f7ff ff00 	bl	800032c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800052c:	2080      	movs	r0, #128	@ 0x80
 800052e:	f7ff fefd 	bl	800032c <lcd_send_cmd>
	lcd_backlight(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f000 f864 	bl	8000600 <lcd_backlight>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	460a      	mov	r2, r1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	4613      	mov	r3, r2
 800054a:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d106      	bne.n	8000560 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	337f      	adds	r3, #127	@ 0x7f
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fee7 	bl	800032c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800055e:	e008      	b.n	8000572 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d105      	bne.n	8000572 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	3b41      	subs	r3, #65	@ 0x41
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fedd 	bl	800032c <lcd_send_cmd>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	4603      	mov	r3, r0
 8000582:	603a      	str	r2, [r7, #0]
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	460b      	mov	r3, r1
 8000588:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800058a:	79ba      	ldrb	r2, [r7, #6]
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ffd3 	bl	800053c <lcd_gotoxy>
	lcd_send_string(str);
 8000596:	6838      	ldr	r0, [r7, #0]
 8000598:	f7ff ffa8 	bl	80004ec <lcd_send_string>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <lcd_clear>:
void lcd_print_char(unsigned char row, unsigned char column, char ch) {
    lcd_gotoxy(row, column);
    lcd_send_char(ch);
}

void lcd_clear(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f7ff febf 	bl	800032c <lcd_send_cmd>
    HAL_Delay(2);
 80005ae:	2002      	movs	r0, #2
 80005b0:	f000 fd22 	bl	8000ff8 <HAL_Delay>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <lcd_clear_line>:

void lcd_clear_line(int line) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if(line == 1) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d105      	bne.n	80005d2 <lcd_clear_line+0x1a>
		lcd_line1();
 80005c6:	f000 f80d 	bl	80005e4 <lcd_line1>
		lcd_send_cmd(0x01);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff feae 	bl	800032c <lcd_send_cmd>
	}  else {
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}
 80005d0:	e004      	b.n	80005dc <lcd_clear_line+0x24>
		lcd_line2();
 80005d2:	f000 f80e 	bl	80005f2 <lcd_line2>
		lcd_send_cmd(0x01);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff fea8 	bl	800032c <lcd_send_cmd>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <lcd_line1>:
    lcd_gotoxy(row, column);

    lcd_send_char(' ');
}

void lcd_line1(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 80005e8:	2080      	movs	r0, #128	@ 0x80
 80005ea:	f7ff fe9f 	bl	800032c <lcd_send_cmd>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <lcd_line2>:

void lcd_line2(void) {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	lcd_send_cmd(0xC0);
 80005f6:	20c0      	movs	r0, #192	@ 0xc0
 80005f8:	f7ff fe98 	bl	800032c <lcd_send_cmd>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <lcd_backlight>:

void lcd_backlight(char state) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800060a:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <lcd_backlight+0x20>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff fe8b 	bl	800032c <lcd_send_cmd>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000096 	.word	0x20000096

08000624 <OTA_FlashWrite>:
extern ESP8266_HandleTypeDef hesp8266;

#define UPDATE_START_ADDRESS 0x08008000
#define FLASH_SECTOR_SIZE    2048

void OTA_FlashWrite(uint32_t address, uint8_t *data, uint32_t length) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 8000630:	f001 f906 	bl	8001840 <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < length; i += 4) {
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e013      	b.n	8000662 <OTA_FlashWrite+0x3e>
        uint32_t word = *((uint32_t *)(data + i));
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	613b      	str	r3, [r7, #16]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, word);
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	18d1      	adds	r1, r2, r3
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	2200      	movs	r2, #0
 800064e:	461c      	mov	r4, r3
 8000650:	4615      	mov	r5, r2
 8000652:	4622      	mov	r2, r4
 8000654:	462b      	mov	r3, r5
 8000656:	2002      	movs	r0, #2
 8000658:	f001 f882 	bl	8001760 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < length; i += 4) {
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3304      	adds	r3, #4
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	d3e7      	bcc.n	800063a <OTA_FlashWrite+0x16>
    }

    HAL_FLASH_Lock();
 800066a:	f001 f90f 	bl	800188c <HAL_FLASH_Lock>
}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000678 <OTA_CheckForUpdate>:

void OTA_CheckForUpdate(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	f5ad 6d31 	sub.w	sp, sp, #2832	@ 0xb10
 800067e:	af02      	add	r7, sp, #8
    char response[256];
    char firmwareData[FLASH_SECTOR_SIZE];
    uint32_t address = UPDATE_START_ADDRESS;
 8000680:	4b4c      	ldr	r3, [pc, #304]	@ (80007b4 <OTA_CheckForUpdate+0x13c>)
 8000682:	f8c7 3b04 	str.w	r3, [r7, #2820]	@ 0xb04
    char url[256];
    char command[256];

    // Construct URL with currentVersion parameter
    snprintf(url, sizeof(url), "%s?currentVersion=%s", checkVersionURL, currentVersion);
 8000686:	4b4c      	ldr	r3, [pc, #304]	@ (80007b8 <OTA_CheckForUpdate+0x140>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 800068e:	4a4b      	ldr	r2, [pc, #300]	@ (80007bc <OTA_CheckForUpdate+0x144>)
 8000690:	9200      	str	r2, [sp, #0]
 8000692:	4a4b      	ldr	r2, [pc, #300]	@ (80007c0 <OTA_CheckForUpdate+0x148>)
 8000694:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000698:	f004 f832 	bl	8004700 <sniprintf>

    // Construct the HTTP GET command
    snprintf(command, sizeof(command), "AT+HTTPGET=\"%s\"\r\n", url);
 800069c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80006a0:	4638      	mov	r0, r7
 80006a2:	4a48      	ldr	r2, [pc, #288]	@ (80007c4 <OTA_CheckForUpdate+0x14c>)
 80006a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a8:	f004 f82a 	bl	8004700 <sniprintf>

    // Send request to check for new version
    ESP8266_SendCommand(&hesp8266, command);
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4845      	ldr	r0, [pc, #276]	@ (80007c8 <OTA_CheckForUpdate+0x150>)
 80006b2:	f7ff fe10 	bl	80002d6 <ESP8266_SendCommand>
    ESP8266_ReceiveResponse(&hesp8266, response, sizeof(response));
 80006b6:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 80006ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006be:	4619      	mov	r1, r3
 80006c0:	4841      	ldr	r0, [pc, #260]	@ (80007c8 <OTA_CheckForUpdate+0x150>)
 80006c2:	f7ff fe1f 	bl	8000304 <ESP8266_ReceiveResponse>

    if (strstr(response, "200 OK")) {
 80006c6:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 80006ca:	4940      	ldr	r1, [pc, #256]	@ (80007cc <OTA_CheckForUpdate+0x154>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 f84b 	bl	8004768 <strstr>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d067      	beq.n	80007a8 <OTA_CheckForUpdate+0x130>
        // Parse new version from response
        // For example, parse actual version from response
        strcpy(newVersion, "1.1.0");
 80006d8:	4b3d      	ldr	r3, [pc, #244]	@ (80007d0 <OTA_CheckForUpdate+0x158>)
 80006da:	4a3e      	ldr	r2, [pc, #248]	@ (80007d4 <OTA_CheckForUpdate+0x15c>)
 80006dc:	6810      	ldr	r0, [r2, #0]
 80006de:	6018      	str	r0, [r3, #0]
 80006e0:	8892      	ldrh	r2, [r2, #4]
 80006e2:	809a      	strh	r2, [r3, #4]
        EEPROM_Write(&heeprom, 0x0000, (uint8_t *)newVersion, strlen(newVersion) + 1);
 80006e4:	483a      	ldr	r0, [pc, #232]	@ (80007d0 <OTA_CheckForUpdate+0x158>)
 80006e6:	f7ff fd9d 	bl	8000224 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	3301      	adds	r3, #1
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4a37      	ldr	r2, [pc, #220]	@ (80007d0 <OTA_CheckForUpdate+0x158>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4838      	ldr	r0, [pc, #224]	@ (80007d8 <OTA_CheckForUpdate+0x160>)
 80006f8:	f7ff fdc1 	bl	800027e <EEPROM_Write>

        // Display update message on LCD
        lcd_clear();
 80006fc:	f7ff ff52 	bl	80005a4 <lcd_clear>
        lcd_print(1, 1, "GUNCELLEME BULUNDU");
 8000700:	4a36      	ldr	r2, [pc, #216]	@ (80007dc <OTA_CheckForUpdate+0x164>)
 8000702:	2101      	movs	r1, #1
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff ff38 	bl	800057a <lcd_print>
        lcd_print(2, 1, "INDIRILIYOR...");
 800070a:	4a35      	ldr	r2, [pc, #212]	@ (80007e0 <OTA_CheckForUpdate+0x168>)
 800070c:	2101      	movs	r1, #1
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff33 	bl	800057a <lcd_print>

        // Construct the command to download new version
        snprintf(command, sizeof(command), "AT+HTTPGET=\"%s\"\r\n", downloadNewVersionURL);
 8000714:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <OTA_CheckForUpdate+0x16c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4638      	mov	r0, r7
 800071a:	4a2a      	ldr	r2, [pc, #168]	@ (80007c4 <OTA_CheckForUpdate+0x14c>)
 800071c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000720:	f003 ffee 	bl	8004700 <sniprintf>

        // Download new version
        ESP8266_SendCommand(&hesp8266, command);
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4827      	ldr	r0, [pc, #156]	@ (80007c8 <OTA_CheckForUpdate+0x150>)
 800072a:	f7ff fdd4 	bl	80002d6 <ESP8266_SendCommand>

        while (1) {
            int received = ESP8266_ReceiveResponse(&hesp8266, firmwareData, sizeof(firmwareData));
 800072e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000736:	4619      	mov	r1, r3
 8000738:	4823      	ldr	r0, [pc, #140]	@ (80007c8 <OTA_CheckForUpdate+0x150>)
 800073a:	f7ff fde3 	bl	8000304 <ESP8266_ReceiveResponse>
 800073e:	4603      	mov	r3, r0
 8000740:	f8c7 3b00 	str.w	r3, [r7, #2816]	@ 0xb00
            if (received <= 0) break;
 8000744:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 8000748:	2b00      	cmp	r3, #0
 800074a:	dd18      	ble.n	800077e <OTA_CheckForUpdate+0x106>

            // Write to flash
            OTA_FlashWrite(address, (uint8_t *)firmwareData, received);
 800074c:	f8d7 2b00 	ldr.w	r2, [r7, #2816]	@ 0xb00
 8000750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000754:	4619      	mov	r1, r3
 8000756:	f8d7 0b04 	ldr.w	r0, [r7, #2820]	@ 0xb04
 800075a:	f7ff ff63 	bl	8000624 <OTA_FlashWrite>
            address += received;
 800075e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 8000762:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	@ 0xb04
 8000766:	4413      	add	r3, r2
 8000768:	f8c7 3b04 	str.w	r3, [r7, #2820]	@ 0xb04

            // Update progress on LCD
            lcd_clear_line(2);
 800076c:	2002      	movs	r0, #2
 800076e:	f7ff ff23 	bl	80005b8 <lcd_clear_line>
            lcd_print(2, 1, "YUKLENIYOR...");
 8000772:	4a1d      	ldr	r2, [pc, #116]	@ (80007e8 <OTA_CheckForUpdate+0x170>)
 8000774:	2101      	movs	r1, #1
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff feff 	bl	800057a <lcd_print>
        while (1) {
 800077c:	e7d7      	b.n	800072e <OTA_CheckForUpdate+0xb6>
            if (received <= 0) break;
 800077e:	bf00      	nop
        }

        // Verify and finalize the update
        EEPROM_Write(&heeprom, 0x0000, (uint8_t *)newVersion, strlen(newVersion) + 1);
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <OTA_CheckForUpdate+0x158>)
 8000782:	f7ff fd4f 	bl	8000224 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	b29b      	uxth	r3, r3
 800078a:	3301      	adds	r3, #1
 800078c:	b29b      	uxth	r3, r3
 800078e:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <OTA_CheckForUpdate+0x158>)
 8000790:	2100      	movs	r1, #0
 8000792:	4811      	ldr	r0, [pc, #68]	@ (80007d8 <OTA_CheckForUpdate+0x160>)
 8000794:	f7ff fd73 	bl	800027e <EEPROM_Write>

        // Display completion message on LCD
        lcd_clear_line(2);
 8000798:	2002      	movs	r0, #2
 800079a:	f7ff ff0d 	bl	80005b8 <lcd_clear_line>
        lcd_print(2, 1, "GUNCELLEME TAMAMLANDI");
 800079e:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <OTA_CheckForUpdate+0x174>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	2002      	movs	r0, #2
 80007a4:	f7ff fee9 	bl	800057a <lcd_print>
    }
}
 80007a8:	bf00      	nop
 80007aa:	f607 3708 	addw	r7, r7, #2824	@ 0xb08
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	08008000 	.word	0x08008000
 80007b8:	2000000c 	.word	0x2000000c
 80007bc:	20000000 	.word	0x20000000
 80007c0:	0800514c 	.word	0x0800514c
 80007c4:	08005164 	.word	0x08005164
 80007c8:	200001ac 	.word	0x200001ac
 80007cc:	08005178 	.word	0x08005178
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	08005180 	.word	0x08005180
 80007d8:	200001a4 	.word	0x200001a4
 80007dc:	08005188 	.word	0x08005188
 80007e0:	0800519c 	.word	0x0800519c
 80007e4:	20000010 	.word	0x20000010
 80007e8:	080051ac 	.word	0x080051ac
 80007ec:	080051bc 	.word	0x080051bc

080007f0 <Bootloader_JumpToApplication>:
void Bootloader_JumpToApplication(void);

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Bootloader_JumpToApplication(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
    uint32_t appJumpAddress = *(__IO uint32_t *)(0x08004000 + 4);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <Bootloader_JumpToApplication+0x30>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	60fb      	str	r3, [r7, #12]
    void (*appResetHandler)(void) = (void (*)(void))appJumpAddress;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	60bb      	str	r3, [r7, #8]
    HAL_DeInit();
 8000800:	f000 fb90 	bl	8000f24 <HAL_DeInit>
    __set_MSP(*(__IO uint32_t *)0x08004000);
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <Bootloader_JumpToApplication+0x34>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f383 8808 	msr	MSP, r3
}
 8000810:	bf00      	nop
    appResetHandler();
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	4798      	blx	r3
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	08004004 	.word	0x08004004
 8000824:	08004000 	.word	0x08004000

08000828 <Bootloader_Main>:

void Bootloader_Main(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    // Check for update trigger condition, e.g., a specific pin state or EEPROM flag
    // If update condition is met, handle OTA update
    // Otherwise, jump to the main application
    OTA_CheckForUpdate();
 800082c:	f7ff ff24 	bl	8000678 <OTA_CheckForUpdate>
    Bootloader_JumpToApplication();
 8000830:	f7ff ffde 	bl	80007f0 <Bootloader_JumpToApplication>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fb5c 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f82c 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 f94c 	bl	8000ae0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000848:	f000 f86e 	bl	8000928 <MX_CAN_Init>
  MX_I2C1_Init();
 800084c:	f000 f8a0 	bl	8000990 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000850:	f000 f8ca 	bl	80009e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000854:	f000 f91a 	bl	8000a8c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  EEPROM_Init(&heeprom, &hi2c1, 0xA0);
 8000858:	22a0      	movs	r2, #160	@ 0xa0
 800085a:	490a      	ldr	r1, [pc, #40]	@ (8000884 <main+0x4c>)
 800085c:	480a      	ldr	r0, [pc, #40]	@ (8000888 <main+0x50>)
 800085e:	f7ff fcfb 	bl	8000258 <EEPROM_Init>
  ESP8266_Init(&hesp8266, &huart1);
 8000862:	490a      	ldr	r1, [pc, #40]	@ (800088c <main+0x54>)
 8000864:	480a      	ldr	r0, [pc, #40]	@ (8000890 <main+0x58>)
 8000866:	f7ff fd28 	bl	80002ba <ESP8266_Init>
  CANBus_Init(&hcanbus, &hcan);
 800086a:	490a      	ldr	r1, [pc, #40]	@ (8000894 <main+0x5c>)
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <main+0x60>)
 800086e:	f7ff fce1 	bl	8000234 <CANBus_Init>

  lcd_init();  // Initialize the LCD
 8000872:	f7ff fe50 	bl	8000516 <lcd_init>
  lcd_clear();
 8000876:	f7ff fe95 	bl	80005a4 <lcd_clear>

  Bootloader_Main();
 800087a:	f7ff ffd5 	bl	8000828 <Bootloader_Main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <main+0x46>
 8000882:	bf00      	nop
 8000884:	200000c0 	.word	0x200000c0
 8000888:	200001a4 	.word	0x200001a4
 800088c:	2000015c 	.word	0x2000015c
 8000890:	200001ac 	.word	0x200001ac
 8000894:	20000098 	.word	0x20000098
 8000898:	200001b0 	.word	0x200001b0

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b090      	sub	sp, #64	@ 0x40
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2228      	movs	r2, #40	@ 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 ff72 	bl	8004794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 f86b 	bl	80029c0 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008f0:	f000 f924 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f002 fad8 	bl	8002ec4 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800091a:	f000 f90f 	bl	8000b3c <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3740      	adds	r7, #64	@ 0x40
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_CAN_Init+0x60>)
 800092e:	4a17      	ldr	r2, [pc, #92]	@ (800098c <MX_CAN_Init+0x64>)
 8000930:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_CAN_Init+0x60>)
 8000934:	2210      	movs	r2, #16
 8000936:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_CAN_Init+0x60>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_CAN_Init+0x60>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000944:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <MX_CAN_Init+0x60>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_CAN_Init+0x60>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000950:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <MX_CAN_Init+0x60>)
 8000952:	2200      	movs	r2, #0
 8000954:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_CAN_Init+0x60>)
 8000958:	2200      	movs	r2, #0
 800095a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <MX_CAN_Init+0x60>)
 800095e:	2200      	movs	r2, #0
 8000960:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_CAN_Init+0x60>)
 8000964:	2200      	movs	r2, #0
 8000966:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <MX_CAN_Init+0x60>)
 800096a:	2200      	movs	r2, #0
 800096c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_CAN_Init+0x60>)
 8000970:	2200      	movs	r2, #0
 8000972:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_CAN_Init+0x60>)
 8000976:	f000 fb63 	bl	8001040 <HAL_CAN_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 f8dc 	bl	8000b3c <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000098 	.word	0x20000098
 800098c:	40006400 	.word	0x40006400

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_I2C1_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <MX_I2C1_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_I2C1_Init+0x4c>)
 800099c:	4a11      	ldr	r2, [pc, #68]	@ (80009e4 <MX_I2C1_Init+0x54>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_I2C1_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <MX_I2C1_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_I2C1_Init+0x4c>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_I2C1_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_I2C1_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_I2C1_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_I2C1_Init+0x4c>)
 80009c8:	f001 f9b6 	bl	8001d38 <HAL_I2C_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C1_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f8b3 	bl	8000b3c <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c0 	.word	0x200000c0
 80009e0:	40005400 	.word	0x40005400
 80009e4:	00061a80 	.word	0x00061a80

080009e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a06:	4a20      	ldr	r2, [pc, #128]	@ (8000a88 <MX_TIM1_Init+0xa0>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a0c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000a10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a1a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a32:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a34:	f002 fbd4 	bl	80031e0 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a3e:	f000 f87d 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a50:	f002 fd1d 	bl	800348e <HAL_TIM_ConfigClockSource>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a5a:	f000 f86f 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <MX_TIM1_Init+0x9c>)
 8000a6c:	f002 ff14 	bl	8003898 <HAL_TIMEx_MasterConfigSynchronization>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000a76:	f000 f861 	bl	8000b3c <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000114 	.word	0x20000114
 8000a88:	40012c00 	.word	0x40012c00

08000a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <MX_USART1_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	f002 ff66 	bl	8003994 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f000 f835 	bl	8000b3c <Error_Handler>
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000015c 	.word	0x2000015c
 8000adc:	40013800 	.word	0x40013800

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a13      	ldr	r2, [pc, #76]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <MX_GPIO_Init+0x58>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  __disable_irq();
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <Error_Handler+0x8>

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <HAL_MspInit+0x5c>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <HAL_MspInit+0x5c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_MspInit+0x5c>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_MspInit+0x5c>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <HAL_MspInit+0x5c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <HAL_MspInit+0x5c>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_MspInit+0x60>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <HAL_MspInit+0x60>)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010000 	.word	0x40010000

08000bac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <HAL_CAN_MspInit+0x8c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d131      	bne.n	8000c30 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <HAL_CAN_MspInit+0x90>)
 8000bce:	69db      	ldr	r3, [r3, #28]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <HAL_CAN_MspInit+0x90>)
 8000bd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bd6:	61d3      	str	r3, [r2, #28]
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <HAL_CAN_MspInit+0x90>)
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_CAN_MspInit+0x90>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <HAL_CAN_MspInit+0x90>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_CAN_MspInit+0x90>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <HAL_CAN_MspInit+0x94>)
 8000c12:	f000 fefd 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <HAL_CAN_MspInit+0x94>)
 8000c2c:	f000 fef0 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40006400 	.word	0x40006400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010800 	.word	0x40010800

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <HAL_I2C_MspInit+0x70>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d123      	bne.n	8000cac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a13      	ldr	r2, [pc, #76]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7c:	23c0      	movs	r3, #192	@ 0xc0
 8000c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c80:	2312      	movs	r3, #18
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480b      	ldr	r0, [pc, #44]	@ (8000cbc <HAL_I2C_MspInit+0x78>)
 8000c90:	f000 febe 	bl	8001a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c9e:	61d3      	str	r3, [r2, #28]
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010c00 	.word	0x40010c00

08000cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <HAL_TIM_Base_MspInit+0x44>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d113      	bne.n	8000cfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cdc:	6193      	str	r3, [r2, #24]
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2019      	movs	r0, #25
 8000cf0:	f000 fbbd 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cf4:	2019      	movs	r0, #25
 8000cf6:	f000 fbd6 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40012c00 	.word	0x40012c00
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a20      	ldr	r2, [pc, #128]	@ (8000da8 <HAL_UART_MspInit+0x9c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d139      	bne.n	8000da0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <HAL_UART_MspInit+0xa0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a1e      	ldr	r2, [pc, #120]	@ (8000dac <HAL_UART_MspInit+0xa0>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <HAL_UART_MspInit+0xa0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <HAL_UART_MspInit+0xa0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a18      	ldr	r2, [pc, #96]	@ (8000dac <HAL_UART_MspInit+0xa0>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <HAL_UART_MspInit+0xa0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	@ (8000db0 <HAL_UART_MspInit+0xa4>)
 8000d72:	f000 fe4d 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <HAL_UART_MspInit+0xa4>)
 8000d8c:	f000 fe40 	bl	8001a10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2025      	movs	r0, #37	@ 0x25
 8000d96:	f000 fb6a 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d9a:	2025      	movs	r0, #37	@ 0x25
 8000d9c:	f000 fb83 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40013800 	.word	0x40013800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 f8dc 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <TIM1_UP_IRQHandler+0x10>)
 8000e12:	f002 fa34 	bl	800327e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000114 	.word	0x20000114

08000e20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e24:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <USART1_IRQHandler+0x10>)
 8000e26:	f002 ff1b 	bl	8003c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000015c 	.word	0x2000015c

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f003 fc9e 	bl	80047a4 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000c000 	.word	0x2000c000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	200001b4 	.word	0x200001b4
 8000e9c:	20000328 	.word	0x20000328

08000ea0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eac:	f7ff fff8 	bl	8000ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eb2:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a09      	ldr	r2, [pc, #36]	@ (8000eec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ec8:	4c09      	ldr	r4, [pc, #36]	@ (8000ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f003 fc6b 	bl	80047b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eda:	f7ff fcad 	bl	8000838 <main>
  bx lr
 8000ede:	4770      	bx	lr
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ee8:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 8000eec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ef0:	20000328 	.word	0x20000328

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_Init+0x28>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_Init+0x28>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 faa5 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f000 f826 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fe18 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_DeInit+0x2c>)
 8000f2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f2e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <HAL_DeInit+0x2c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_DeInit+0x2c>)
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f3c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f3e:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <HAL_DeInit+0x2c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f44:	f000 f806 	bl	8000f54 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fa9f 	bl	80014c2 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f9c:	f000 fa67 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000014 	.word	0x20000014
 8000fb8:	2000001c 	.word	0x2000001c
 8000fbc:	20000018 	.word	0x20000018

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a03      	ldr	r2, [pc, #12]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	2000001c 	.word	0x2000001c
 8000fe0:	200001b8 	.word	0x200001b8

08000fe4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	@ (8000ff4 <HAL_GetTick+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	200001b8 	.word	0x200001b8

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff fff0 	bl	8000fe4 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffe0 	bl	8000fe4 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000001c 	.word	0x2000001c

08001040 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0ed      	b.n	800122e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fda4 	bl	8000bac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001074:	f7ff ffb6 	bl	8000fe4 <HAL_GetTick>
 8001078:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107a:	e012      	b.n	80010a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800107c:	f7ff ffb2 	bl	8000fe4 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b0a      	cmp	r3, #10
 8001088:	d90b      	bls.n	80010a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2205      	movs	r2, #5
 800109a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0c5      	b.n	800122e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0e5      	beq.n	800107c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0202 	bic.w	r2, r2, #2
 80010be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff ff90 	bl	8000fe4 <HAL_GetTick>
 80010c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010c6:	e012      	b.n	80010ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c8:	f7ff ff8c 	bl	8000fe4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d90b      	bls.n	80010ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2205      	movs	r2, #5
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e09f      	b.n	800122e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e5      	bne.n	80010c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7e1b      	ldrb	r3, [r3, #24]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d108      	bne.n	8001116 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e007      	b.n	8001126 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7e5b      	ldrb	r3, [r3, #25]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d108      	bne.n	8001140 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e007      	b.n	8001150 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800114e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7e9b      	ldrb	r3, [r3, #26]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d108      	bne.n	800116a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0220 	orr.w	r2, r2, #32
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e007      	b.n	800117a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0220 	bic.w	r2, r2, #32
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7edb      	ldrb	r3, [r3, #27]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0210 	bic.w	r2, r2, #16
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e007      	b.n	80011a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0210 	orr.w	r2, r2, #16
 80011a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7f1b      	ldrb	r3, [r3, #28]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d108      	bne.n	80011be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0208 	orr.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e007      	b.n	80011ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0208 	bic.w	r2, r2, #8
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7f5b      	ldrb	r3, [r3, #29]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d108      	bne.n	80011e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0204 	orr.w	r2, r2, #4
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0204 	bic.w	r2, r2, #4
 80011f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	ea42 0103 	orr.w	r1, r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	1e5a      	subs	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d12e      	bne.n	80012a8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2202      	movs	r2, #2
 800124e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001262:	f7ff febf 	bl	8000fe4 <HAL_GetTick>
 8001266:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001268:	e012      	b.n	8001290 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800126a:	f7ff febb 	bl	8000fe4 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b0a      	cmp	r3, #10
 8001276:	d90b      	bls.n	8001290 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2205      	movs	r2, #5
 8001288:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e012      	b.n	80012b6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1e5      	bne.n	800126a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e006      	b.n	80012b6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
  }
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4906      	ldr	r1, [pc, #24]	@ (8001358 <__NVIC_EnableIRQ+0x34>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001438:	f7ff ff90 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff2d 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff42 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff35 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa2 	bl	8001414 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d008      	beq.n	8001504 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2204      	movs	r2, #4
 80014f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e020      	b.n	8001546 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020e 	bic.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d005      	beq.n	8001574 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2204      	movs	r2, #4
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e0d6      	b.n	8001722 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 020e 	bic.w	r2, r2, #14
 8001582:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b64      	ldr	r3, [pc, #400]	@ (800172c <HAL_DMA_Abort_IT+0x1dc>)
 800159c:	429a      	cmp	r2, r3
 800159e:	d958      	bls.n	8001652 <HAL_DMA_Abort_IT+0x102>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a62      	ldr	r2, [pc, #392]	@ (8001730 <HAL_DMA_Abort_IT+0x1e0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d04f      	beq.n	800164a <HAL_DMA_Abort_IT+0xfa>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a61      	ldr	r2, [pc, #388]	@ (8001734 <HAL_DMA_Abort_IT+0x1e4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d048      	beq.n	8001646 <HAL_DMA_Abort_IT+0xf6>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a5f      	ldr	r2, [pc, #380]	@ (8001738 <HAL_DMA_Abort_IT+0x1e8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d040      	beq.n	8001640 <HAL_DMA_Abort_IT+0xf0>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a5e      	ldr	r2, [pc, #376]	@ (800173c <HAL_DMA_Abort_IT+0x1ec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d038      	beq.n	800163a <HAL_DMA_Abort_IT+0xea>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001740 <HAL_DMA_Abort_IT+0x1f0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d030      	beq.n	8001634 <HAL_DMA_Abort_IT+0xe4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001744 <HAL_DMA_Abort_IT+0x1f4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d028      	beq.n	800162e <HAL_DMA_Abort_IT+0xde>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a52      	ldr	r2, [pc, #328]	@ (800172c <HAL_DMA_Abort_IT+0x1dc>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d020      	beq.n	8001628 <HAL_DMA_Abort_IT+0xd8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a57      	ldr	r2, [pc, #348]	@ (8001748 <HAL_DMA_Abort_IT+0x1f8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d019      	beq.n	8001624 <HAL_DMA_Abort_IT+0xd4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a55      	ldr	r2, [pc, #340]	@ (800174c <HAL_DMA_Abort_IT+0x1fc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d012      	beq.n	8001620 <HAL_DMA_Abort_IT+0xd0>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a54      	ldr	r2, [pc, #336]	@ (8001750 <HAL_DMA_Abort_IT+0x200>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00a      	beq.n	800161a <HAL_DMA_Abort_IT+0xca>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a52      	ldr	r2, [pc, #328]	@ (8001754 <HAL_DMA_Abort_IT+0x204>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d102      	bne.n	8001614 <HAL_DMA_Abort_IT+0xc4>
 800160e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001612:	e01b      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001618:	e018      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 800161a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161e:	e015      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001620:	2310      	movs	r3, #16
 8001622:	e013      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001624:	2301      	movs	r3, #1
 8001626:	e011      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800162c:	e00e      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 800162e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001632:	e00b      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001638:	e008      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 800163a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163e:	e005      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001644:	e002      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001646:	2310      	movs	r3, #16
 8001648:	e000      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 800164a:	2301      	movs	r3, #1
 800164c:	4a42      	ldr	r2, [pc, #264]	@ (8001758 <HAL_DMA_Abort_IT+0x208>)
 800164e:	6053      	str	r3, [r2, #4]
 8001650:	e057      	b.n	8001702 <HAL_DMA_Abort_IT+0x1b2>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a36      	ldr	r2, [pc, #216]	@ (8001730 <HAL_DMA_Abort_IT+0x1e0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d04f      	beq.n	80016fc <HAL_DMA_Abort_IT+0x1ac>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a34      	ldr	r2, [pc, #208]	@ (8001734 <HAL_DMA_Abort_IT+0x1e4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d048      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x1a8>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a33      	ldr	r2, [pc, #204]	@ (8001738 <HAL_DMA_Abort_IT+0x1e8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d040      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x1a2>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a31      	ldr	r2, [pc, #196]	@ (800173c <HAL_DMA_Abort_IT+0x1ec>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d038      	beq.n	80016ec <HAL_DMA_Abort_IT+0x19c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a30      	ldr	r2, [pc, #192]	@ (8001740 <HAL_DMA_Abort_IT+0x1f0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d030      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x196>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2e      	ldr	r2, [pc, #184]	@ (8001744 <HAL_DMA_Abort_IT+0x1f4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d028      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x190>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a26      	ldr	r2, [pc, #152]	@ (800172c <HAL_DMA_Abort_IT+0x1dc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d020      	beq.n	80016da <HAL_DMA_Abort_IT+0x18a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <HAL_DMA_Abort_IT+0x1f8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x186>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a29      	ldr	r2, [pc, #164]	@ (800174c <HAL_DMA_Abort_IT+0x1fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x182>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a27      	ldr	r2, [pc, #156]	@ (8001750 <HAL_DMA_Abort_IT+0x200>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00a      	beq.n	80016cc <HAL_DMA_Abort_IT+0x17c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <HAL_DMA_Abort_IT+0x204>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d102      	bne.n	80016c6 <HAL_DMA_Abort_IT+0x176>
 80016c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c4:	e01b      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ca:	e018      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d0:	e015      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016d2:	2310      	movs	r3, #16
 80016d4:	e013      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e011      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016de:	e00e      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016e4:	e00b      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ea:	e008      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f0:	e005      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016f6:	e002      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016f8:	2310      	movs	r3, #16
 80016fa:	e000      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016fc:	2301      	movs	r3, #1
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <HAL_DMA_Abort_IT+0x20c>)
 8001700:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
    } 
  }
  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40020080 	.word	0x40020080
 8001730:	40020008 	.word	0x40020008
 8001734:	4002001c 	.word	0x4002001c
 8001738:	40020030 	.word	0x40020030
 800173c:	40020044 	.word	0x40020044
 8001740:	40020058 	.word	0x40020058
 8001744:	4002006c 	.word	0x4002006c
 8001748:	40020408 	.word	0x40020408
 800174c:	4002041c 	.word	0x4002041c
 8001750:	40020430 	.word	0x40020430
 8001754:	40020444 	.word	0x40020444
 8001758:	40020400 	.word	0x40020400
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800177a:	4b2f      	ldr	r3, [pc, #188]	@ (8001838 <HAL_FLASH_Program+0xd8>)
 800177c:	7e1b      	ldrb	r3, [r3, #24]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_FLASH_Program+0x26>
 8001782:	2302      	movs	r3, #2
 8001784:	e054      	b.n	8001830 <HAL_FLASH_Program+0xd0>
 8001786:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <HAL_FLASH_Program+0xd8>)
 8001788:	2201      	movs	r2, #1
 800178a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800178c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001790:	f000 f8a8 	bl	80018e4 <FLASH_WaitForLastOperation>
 8001794:	4603      	mov	r3, r0
 8001796:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d144      	bne.n	8001828 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d102      	bne.n	80017aa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80017a4:	2301      	movs	r3, #1
 80017a6:	757b      	strb	r3, [r7, #21]
 80017a8:	e007      	b.n	80017ba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d102      	bne.n	80017b6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80017b0:	2302      	movs	r3, #2
 80017b2:	757b      	strb	r3, [r7, #21]
 80017b4:	e001      	b.n	80017ba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80017b6:	2304      	movs	r3, #4
 80017b8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	75bb      	strb	r3, [r7, #22]
 80017be:	e02d      	b.n	800181c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80017c0:	7dbb      	ldrb	r3, [r7, #22]
 80017c2:	005a      	lsls	r2, r3, #1
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	eb02 0c03 	add.w	ip, r2, r3
 80017ca:	7dbb      	ldrb	r3, [r7, #22]
 80017cc:	0119      	lsls	r1, r3, #4
 80017ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017d2:	f1c1 0620 	rsb	r6, r1, #32
 80017d6:	f1a1 0020 	sub.w	r0, r1, #32
 80017da:	fa22 f401 	lsr.w	r4, r2, r1
 80017de:	fa03 f606 	lsl.w	r6, r3, r6
 80017e2:	4334      	orrs	r4, r6
 80017e4:	fa23 f000 	lsr.w	r0, r3, r0
 80017e8:	4304      	orrs	r4, r0
 80017ea:	fa23 f501 	lsr.w	r5, r3, r1
 80017ee:	b2a3      	uxth	r3, r4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4660      	mov	r0, ip
 80017f4:	f000 f85a 	bl	80018ac <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017fc:	f000 f872 	bl	80018e4 <FLASH_WaitForLastOperation>
 8001800:	4603      	mov	r3, r0
 8001802:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001804:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_FLASH_Program+0xdc>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a0c      	ldr	r2, [pc, #48]	@ (800183c <HAL_FLASH_Program+0xdc>)
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d107      	bne.n	8001826 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001816:	7dbb      	ldrb	r3, [r7, #22]
 8001818:	3301      	adds	r3, #1
 800181a:	75bb      	strb	r3, [r7, #22]
 800181c:	7dba      	ldrb	r2, [r7, #22]
 800181e:	7d7b      	ldrb	r3, [r7, #21]
 8001820:	429a      	cmp	r2, r3
 8001822:	d3cd      	bcc.n	80017c0 <HAL_FLASH_Program+0x60>
 8001824:	e000      	b.n	8001828 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001826:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_FLASH_Program+0xd8>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]

  return status;
 800182e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001830:	4618      	mov	r0, r3
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001838:	200001c0 	.word	0x200001c0
 800183c:	40022000 	.word	0x40022000

08001840 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <HAL_FLASH_Unlock+0x40>)
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_FLASH_Unlock+0x40>)
 8001858:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_FLASH_Unlock+0x44>)
 800185a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_FLASH_Unlock+0x40>)
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <HAL_FLASH_Unlock+0x48>)
 8001860:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <HAL_FLASH_Unlock+0x40>)
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001872:	79fb      	ldrb	r3, [r7, #7]
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40022000 	.word	0x40022000
 8001884:	45670123 	.word	0x45670123
 8001888:	cdef89ab 	.word	0xcdef89ab

0800188c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_FLASH_Lock+0x1c>)
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <HAL_FLASH_Lock+0x1c>)
 8001896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000

080018ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <FLASH_Program_HalfWord+0x30>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <FLASH_Program_HalfWord+0x34>)
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <FLASH_Program_HalfWord+0x34>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	801a      	strh	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200001c0 	.word	0x200001c0
 80018e0:	40022000 	.word	0x40022000

080018e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fb7a 	bl	8000fe4 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80018f2:	e010      	b.n	8001916 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018fa:	d00c      	beq.n	8001916 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <FLASH_WaitForLastOperation+0x2e>
 8001902:	f7ff fb6f 	bl	8000fe4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d201      	bcs.n	8001916 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e025      	b.n	8001962 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <FLASH_WaitForLastOperation+0x88>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1e8      	bne.n	80018f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <FLASH_WaitForLastOperation+0x88>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <FLASH_WaitForLastOperation+0x88>)
 8001930:	2220      	movs	r2, #32
 8001932:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <FLASH_WaitForLastOperation+0x88>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10b      	bne.n	8001958 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <FLASH_WaitForLastOperation+0x88>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800194c:	4b07      	ldr	r3, [pc, #28]	@ (800196c <FLASH_WaitForLastOperation+0x88>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001958:	f000 f80a 	bl	8001970 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000

08001970 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800197a:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <FLASH_SetErrorCode+0x98>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <FLASH_SetErrorCode+0x9c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a0c <FLASH_SetErrorCode+0x9c>)
 8001990:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800199a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <FLASH_SetErrorCode+0x98>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <FLASH_SetErrorCode+0x9c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <FLASH_SetErrorCode+0x9c>)
 80019b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80019ba:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <FLASH_SetErrorCode+0x98>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <FLASH_SetErrorCode+0x9c>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	4a0f      	ldr	r2, [pc, #60]	@ (8001a0c <FLASH_SetErrorCode+0x9c>)
 80019d0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <FLASH_SetErrorCode+0x98>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <FLASH_SetErrorCode+0x98>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f240 1201 	movw	r2, #257	@ 0x101
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d106      	bne.n	80019f6 <FLASH_SetErrorCode+0x86>
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <FLASH_SetErrorCode+0x98>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <FLASH_SetErrorCode+0x98>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	61d3      	str	r3, [r2, #28]
}  
 80019f4:	e002      	b.n	80019fc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <FLASH_SetErrorCode+0x98>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60d3      	str	r3, [r2, #12]
}  
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	200001c0 	.word	0x200001c0

08001a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b08b      	sub	sp, #44	@ 0x2c
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	e179      	b.n	8001d18 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a24:	2201      	movs	r2, #1
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f040 8168 	bne.w	8001d12 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a96      	ldr	r2, [pc, #600]	@ (8001ca0 <HAL_GPIO_Init+0x290>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d05e      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a4c:	4a94      	ldr	r2, [pc, #592]	@ (8001ca0 <HAL_GPIO_Init+0x290>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d875      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a52:	4a94      	ldr	r2, [pc, #592]	@ (8001ca4 <HAL_GPIO_Init+0x294>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d058      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a58:	4a92      	ldr	r2, [pc, #584]	@ (8001ca4 <HAL_GPIO_Init+0x294>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d86f      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a5e:	4a92      	ldr	r2, [pc, #584]	@ (8001ca8 <HAL_GPIO_Init+0x298>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d052      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a64:	4a90      	ldr	r2, [pc, #576]	@ (8001ca8 <HAL_GPIO_Init+0x298>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d869      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a6a:	4a90      	ldr	r2, [pc, #576]	@ (8001cac <HAL_GPIO_Init+0x29c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d04c      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a70:	4a8e      	ldr	r2, [pc, #568]	@ (8001cac <HAL_GPIO_Init+0x29c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d863      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a76:	4a8e      	ldr	r2, [pc, #568]	@ (8001cb0 <HAL_GPIO_Init+0x2a0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d046      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a7c:	4a8c      	ldr	r2, [pc, #560]	@ (8001cb0 <HAL_GPIO_Init+0x2a0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d85d      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a82:	2b12      	cmp	r3, #18
 8001a84:	d82a      	bhi.n	8001adc <HAL_GPIO_Init+0xcc>
 8001a86:	2b12      	cmp	r3, #18
 8001a88:	d859      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <HAL_GPIO_Init+0x80>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001b0b 	.word	0x08001b0b
 8001a94:	08001ae5 	.word	0x08001ae5
 8001a98:	08001af7 	.word	0x08001af7
 8001a9c:	08001b39 	.word	0x08001b39
 8001aa0:	08001b3f 	.word	0x08001b3f
 8001aa4:	08001b3f 	.word	0x08001b3f
 8001aa8:	08001b3f 	.word	0x08001b3f
 8001aac:	08001b3f 	.word	0x08001b3f
 8001ab0:	08001b3f 	.word	0x08001b3f
 8001ab4:	08001b3f 	.word	0x08001b3f
 8001ab8:	08001b3f 	.word	0x08001b3f
 8001abc:	08001b3f 	.word	0x08001b3f
 8001ac0:	08001b3f 	.word	0x08001b3f
 8001ac4:	08001b3f 	.word	0x08001b3f
 8001ac8:	08001b3f 	.word	0x08001b3f
 8001acc:	08001b3f 	.word	0x08001b3f
 8001ad0:	08001b3f 	.word	0x08001b3f
 8001ad4:	08001aed 	.word	0x08001aed
 8001ad8:	08001b01 	.word	0x08001b01
 8001adc:	4a75      	ldr	r2, [pc, #468]	@ (8001cb4 <HAL_GPIO_Init+0x2a4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ae2:	e02c      	b.n	8001b3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	623b      	str	r3, [r7, #32]
          break;
 8001aea:	e029      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	3304      	adds	r3, #4
 8001af2:	623b      	str	r3, [r7, #32]
          break;
 8001af4:	e024      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	3308      	adds	r3, #8
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e01f      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	330c      	adds	r3, #12
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e01a      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b12:	2304      	movs	r3, #4
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e013      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b20:	2308      	movs	r3, #8
 8001b22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	611a      	str	r2, [r3, #16]
          break;
 8001b2a:	e009      	b.n	8001b40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	615a      	str	r2, [r3, #20]
          break;
 8001b36:	e003      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	e000      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          break;
 8001b3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2bff      	cmp	r3, #255	@ 0xff
 8001b44:	d801      	bhi.n	8001b4a <HAL_GPIO_Init+0x13a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	e001      	b.n	8001b4e <HAL_GPIO_Init+0x13e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2bff      	cmp	r3, #255	@ 0xff
 8001b54:	d802      	bhi.n	8001b5c <HAL_GPIO_Init+0x14c>
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x152>
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	3b08      	subs	r3, #8
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	210f      	movs	r1, #15
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	6a39      	ldr	r1, [r7, #32]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80c1 	beq.w	8001d12 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b90:	4b49      	ldr	r3, [pc, #292]	@ (8001cb8 <HAL_GPIO_Init+0x2a8>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a48      	ldr	r2, [pc, #288]	@ (8001cb8 <HAL_GPIO_Init+0x2a8>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <HAL_GPIO_Init+0x2a8>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ba8:	4a44      	ldr	r2, [pc, #272]	@ (8001cbc <HAL_GPIO_Init+0x2ac>)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc0 <HAL_GPIO_Init+0x2b0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d01f      	beq.n	8001c14 <HAL_GPIO_Init+0x204>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc4 <HAL_GPIO_Init+0x2b4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d019      	beq.n	8001c10 <HAL_GPIO_Init+0x200>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3a      	ldr	r2, [pc, #232]	@ (8001cc8 <HAL_GPIO_Init+0x2b8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_GPIO_Init+0x1fc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a39      	ldr	r2, [pc, #228]	@ (8001ccc <HAL_GPIO_Init+0x2bc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_Init+0x1f8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a38      	ldr	r2, [pc, #224]	@ (8001cd0 <HAL_GPIO_Init+0x2c0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x1f4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a37      	ldr	r2, [pc, #220]	@ (8001cd4 <HAL_GPIO_Init+0x2c4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_Init+0x1f0>
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	e00a      	b.n	8001c16 <HAL_GPIO_Init+0x206>
 8001c00:	2306      	movs	r3, #6
 8001c02:	e008      	b.n	8001c16 <HAL_GPIO_Init+0x206>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_Init+0x206>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x206>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x206>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x206>
 8001c14:	2300      	movs	r3, #0
 8001c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c26:	4925      	ldr	r1, [pc, #148]	@ (8001cbc <HAL_GPIO_Init+0x2ac>)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c40:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4924      	ldr	r1, [pc, #144]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c4e:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	4920      	ldr	r1, [pc, #128]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	491a      	ldr	r1, [pc, #104]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c76:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4916      	ldr	r1, [pc, #88]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d025      	beq.n	8001cdc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4910      	ldr	r1, [pc, #64]	@ (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e025      	b.n	8001cea <HAL_GPIO_Init+0x2da>
 8001c9e:	bf00      	nop
 8001ca0:	10320000 	.word	0x10320000
 8001ca4:	10310000 	.word	0x10310000
 8001ca8:	10220000 	.word	0x10220000
 8001cac:	10210000 	.word	0x10210000
 8001cb0:	10120000 	.word	0x10120000
 8001cb4:	10110000 	.word	0x10110000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	40010800 	.word	0x40010800
 8001cc4:	40010c00 	.word	0x40010c00
 8001cc8:	40011000 	.word	0x40011000
 8001ccc:	40011400 	.word	0x40011400
 8001cd0:	40011800 	.word	0x40011800
 8001cd4:	40011c00 	.word	0x40011c00
 8001cd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4913      	ldr	r1, [pc, #76]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	490e      	ldr	r1, [pc, #56]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	4909      	ldr	r1, [pc, #36]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	3301      	adds	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f47f ae7e 	bne.w	8001a24 <HAL_GPIO_Init+0x14>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	372c      	adds	r7, #44	@ 0x2c
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	40010400 	.word	0x40010400

08001d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e12b      	b.n	8001fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe ff70 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	@ 0x24
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d9c:	f001 f9da 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8001da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a81      	ldr	r2, [pc, #516]	@ (8001fac <HAL_I2C_Init+0x274>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d807      	bhi.n	8001dbc <HAL_I2C_Init+0x84>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a80      	ldr	r2, [pc, #512]	@ (8001fb0 <HAL_I2C_Init+0x278>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bf94      	ite	ls
 8001db4:	2301      	movls	r3, #1
 8001db6:	2300      	movhi	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e006      	b.n	8001dca <HAL_I2C_Init+0x92>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a7d      	ldr	r2, [pc, #500]	@ (8001fb4 <HAL_I2C_Init+0x27c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0e7      	b.n	8001fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a78      	ldr	r2, [pc, #480]	@ (8001fb8 <HAL_I2C_Init+0x280>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0c9b      	lsrs	r3, r3, #18
 8001ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a6a      	ldr	r2, [pc, #424]	@ (8001fac <HAL_I2C_Init+0x274>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d802      	bhi.n	8001e0c <HAL_I2C_Init+0xd4>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	e009      	b.n	8001e20 <HAL_I2C_Init+0xe8>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	4a69      	ldr	r2, [pc, #420]	@ (8001fbc <HAL_I2C_Init+0x284>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	3301      	adds	r3, #1
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	495c      	ldr	r1, [pc, #368]	@ (8001fac <HAL_I2C_Init+0x274>)
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	d819      	bhi.n	8001e74 <HAL_I2C_Init+0x13c>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e59      	subs	r1, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e54:	400b      	ands	r3, r1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_I2C_Init+0x138>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e59      	subs	r1, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6e:	e051      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e04f      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d111      	bne.n	8001ea0 <HAL_I2C_Init+0x168>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	440b      	add	r3, r1
 8001e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e012      	b.n	8001ec6 <HAL_I2C_Init+0x18e>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	0099      	lsls	r1, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Init+0x196>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e022      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_I2C_Init+0x1bc>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e58      	subs	r0, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	440b      	add	r3, r1
 8001ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef2:	e00f      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	0099      	lsls	r1, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	6809      	ldr	r1, [r1, #0]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6911      	ldr	r1, [r2, #16]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	000186a0 	.word	0x000186a0
 8001fb0:	001e847f 	.word	0x001e847f
 8001fb4:	003d08ff 	.word	0x003d08ff
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	817b      	strh	r3, [r7, #10]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff f806 	bl	8000fe4 <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	f040 80e0 	bne.w	80021a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2319      	movs	r3, #25
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4970      	ldr	r1, [pc, #448]	@ (80021b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fb0c 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0d3      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_I2C_Master_Transmit+0x50>
 800200c:	2302      	movs	r3, #2
 800200e:	e0cc      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d007      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2221      	movs	r2, #33	@ 0x21
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2210      	movs	r2, #16
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	893a      	ldrh	r2, [r7, #8]
 8002066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a50      	ldr	r2, [pc, #320]	@ (80021b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f9ae 	bl	80023e0 <I2C_MasterRequestWrite>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e08d      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020a4:	e066      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fbca 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d107      	bne.n	80020ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b04      	cmp	r3, #4
 800210e:	d11b      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x188>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d017      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	6a39      	ldr	r1, [r7, #32]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fbc1 	bl	80028d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e01a      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d194      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800218a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	00100002 	.word	0x00100002
 80021b8:	ffff0000 	.word	0xffff0000

080021bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	817b      	strh	r3, [r7, #10]
 80021ce:	460b      	mov	r3, r1
 80021d0:	813b      	strh	r3, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021d6:	f7fe ff05 	bl	8000fe4 <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	f040 80d9 	bne.w	800239c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2319      	movs	r3, #25
 80021f0:	2201      	movs	r2, #1
 80021f2:	496d      	ldr	r1, [pc, #436]	@ (80023a8 <HAL_I2C_Mem_Write+0x1ec>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fa0b 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	e0cc      	b.n	800239e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_I2C_Mem_Write+0x56>
 800220e:	2302      	movs	r3, #2
 8002210:	e0c5      	b.n	800239e <HAL_I2C_Mem_Write+0x1e2>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d007      	beq.n	8002238 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002246:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2221      	movs	r2, #33	@ 0x21
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2240      	movs	r2, #64	@ 0x40
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a3a      	ldr	r2, [r7, #32]
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002268:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a4d      	ldr	r2, [pc, #308]	@ (80023ac <HAL_I2C_Mem_Write+0x1f0>)
 8002278:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800227a:	88f8      	ldrh	r0, [r7, #6]
 800227c:	893a      	ldrh	r2, [r7, #8]
 800227e:	8979      	ldrh	r1, [r7, #10]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f92a 	bl	80024e4 <I2C_RequestMemoryWrite>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d052      	beq.n	800233c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e081      	b.n	800239e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fad0 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00d      	beq.n	80022c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d107      	bne.n	80022c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06b      	b.n	800239e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b04      	cmp	r3, #4
 8002302:	d11b      	bne.n	800233c <HAL_I2C_Mem_Write+0x180>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d017      	beq.n	800233c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1aa      	bne.n	800229a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fac3 	bl	80028d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	2b04      	cmp	r3, #4
 800235a:	d107      	bne.n	800236c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800236a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e016      	b.n	800239e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800237e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	00100002 	.word	0x00100002
 80023ac:	ffff0000 	.word	0xffff0000

080023b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023be:	b2db      	uxtb	r3, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	460b      	mov	r3, r1
 80023ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d006      	beq.n	800240a <I2C_MasterRequestWrite+0x2a>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d003      	beq.n	800240a <I2C_MasterRequestWrite+0x2a>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002408:	d108      	bne.n	800241c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e00b      	b.n	8002434 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	2b12      	cmp	r3, #18
 8002422:	d107      	bne.n	8002434 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002432:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f8e5 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800245a:	d103      	bne.n	8002464 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e035      	b.n	80024d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002470:	d108      	bne.n	8002484 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002472:	897b      	ldrh	r3, [r7, #10]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	e01b      	b.n	80024bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002484:	897b      	ldrh	r3, [r7, #10]
 8002486:	11db      	asrs	r3, r3, #7
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 0306 	and.w	r3, r3, #6
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f063 030f 	orn	r3, r3, #15
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	490e      	ldr	r1, [pc, #56]	@ (80024dc <I2C_MasterRequestWrite+0xfc>)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f92e 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e010      	b.n	80024d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4907      	ldr	r1, [pc, #28]	@ (80024e0 <I2C_MasterRequestWrite+0x100>)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f91e 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	00010008 	.word	0x00010008
 80024e0:	00010002 	.word	0x00010002

080024e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800250c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2200      	movs	r2, #0
 8002516:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f878 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002534:	d103      	bne.n	800253e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800253c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e05f      	b.n	8002602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002550:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	6a3a      	ldr	r2, [r7, #32]
 8002556:	492d      	ldr	r1, [pc, #180]	@ (800260c <I2C_RequestMemoryWrite+0x128>)
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f8d3 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e04c      	b.n	8002602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002580:	6a39      	ldr	r1, [r7, #32]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f95e 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	2b04      	cmp	r3, #4
 8002594:	d107      	bne.n	80025a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e02b      	b.n	8002602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025b0:	893b      	ldrh	r3, [r7, #8]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	611a      	str	r2, [r3, #16]
 80025ba:	e021      	b.n	8002600 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025bc:	893b      	ldrh	r3, [r7, #8]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f938 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d107      	bne.n	80025f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e005      	b.n	8002602 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f6:	893b      	ldrh	r3, [r7, #8]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	00010002 	.word	0x00010002

08002610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002620:	e048      	b.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002628:	d044      	beq.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7fe fcdb 	bl	8000fe4 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d139      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10d      	bne.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x56>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	43da      	mvns	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	e00c      	b.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	429a      	cmp	r2, r3
 8002684:	d116      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e023      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10d      	bne.n	80026da <I2C_WaitOnFlagUntilTimeout+0xca>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	43da      	mvns	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	e00c      	b.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d093      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002712:	e071      	b.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	d123      	bne.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002732:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800273c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e067      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002772:	d041      	beq.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002774:	f7fe fc36 	bl	8000fe4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d302      	bcc.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d136      	bne.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d10c      	bne.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4013      	ands	r3, r2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e00b      	b.n	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e021      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10c      	bne.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e00b      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf14      	ite	ne
 800282e:	2301      	movne	r3, #1
 8002830:	2300      	moveq	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f af6d 	bne.w	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002850:	e034      	b.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f886 	bl	8002964 <I2C_IsAcknowledgeFailed>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e034      	b.n	80028cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002868:	d028      	beq.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7fe fbbb 	bl	8000fe4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d11d      	bne.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288a:	2b80      	cmp	r3, #128	@ 0x80
 800288c:	d016      	beq.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e007      	b.n	80028cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c6:	2b80      	cmp	r3, #128	@ 0x80
 80028c8:	d1c3      	bne.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e0:	e034      	b.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f83e 	bl	8002964 <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e034      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f8:	d028      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe fb73 	bl	8000fe4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11d      	bne.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d016      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d1c3      	bne.n	80028e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297a:	d11b      	bne.n	80029b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002984:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f043 0204 	orr.w	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e272      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8087 	beq.w	8002aee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e0:	4b92      	ldr	r3, [pc, #584]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d00c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ec:	4b8f      	ldr	r3, [pc, #572]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d112      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5e>
 80029f8:	4b8c      	ldr	r3, [pc, #560]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a04:	d10b      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a06:	4b89      	ldr	r3, [pc, #548]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d06c      	beq.n	8002aec <HAL_RCC_OscConfig+0x12c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d168      	bne.n	8002aec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e24c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x76>
 8002a28:	4b80      	ldr	r3, [pc, #512]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x98>
 8002a3e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7a      	ldr	r2, [pc, #488]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b78      	ldr	r3, [pc, #480]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a77      	ldr	r2, [pc, #476]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e01d      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0xbc>
 8002a62:	4b72      	ldr	r3, [pc, #456]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a71      	ldr	r2, [pc, #452]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6e      	ldr	r2, [pc, #440]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6a      	ldr	r2, [pc, #424]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b68      	ldr	r3, [pc, #416]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a67      	ldr	r2, [pc, #412]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe faa2 	bl	8000fe4 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fa9e 	bl	8000fe4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e200      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xe4>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fa8e 	bl	8000fe4 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fa8a 	bl	8000fe4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1ec      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	4b53      	ldr	r3, [pc, #332]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x10c>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d063      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afa:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d11c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x18c>
 8002b12:	4b46      	ldr	r3, [pc, #280]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	4b43      	ldr	r3, [pc, #268]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e1c0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b3d      	ldr	r3, [pc, #244]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4939      	ldr	r1, [pc, #228]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	e03a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b54:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fa43 	bl	8000fe4 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fe fa3f 	bl	8000fe4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e1a1      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b2a      	ldr	r3, [pc, #168]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4927      	ldr	r1, [pc, #156]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4b26      	ldr	r3, [pc, #152]	@ (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fa22 	bl	8000fe4 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fa1e 	bl	8000fe4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e180      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d03a      	beq.n	8002c44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b17      	ldr	r3, [pc, #92]	@ (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bdc:	f7fe fa02 	bl	8000fe4 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fe f9fe 	bl	8000fe4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e160      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f000 face 	bl	80031a4 <RCC_Delay>
 8002c08:	e01c      	b.n	8002c44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7fe f9e8 	bl	8000fe4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c16:	e00f      	b.n	8002c38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fe f9e4 	bl	8000fe4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d908      	bls.n	8002c38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e146      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	42420000 	.word	0x42420000
 8002c34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	4b92      	ldr	r3, [pc, #584]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e9      	bne.n	8002c18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a6 	beq.w	8002d9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4b8b      	ldr	r3, [pc, #556]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b88      	ldr	r3, [pc, #544]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4a87      	ldr	r2, [pc, #540]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	61d3      	str	r3, [r2, #28]
 8002c6e:	4b85      	ldr	r3, [pc, #532]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b82      	ldr	r3, [pc, #520]	@ (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fe f9a5 	bl	8000fe4 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fe f9a1 	bl	8000fe4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	@ 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e103      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b75      	ldr	r3, [pc, #468]	@ (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x312>
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e02d      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x334>
 8002cda:	4b6a      	ldr	r3, [pc, #424]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a69      	ldr	r2, [pc, #420]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	4b67      	ldr	r3, [pc, #412]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a66      	ldr	r2, [pc, #408]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	e01c      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x356>
 8002cfc:	4b61      	ldr	r3, [pc, #388]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a60      	ldr	r2, [pc, #384]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	4b5e      	ldr	r3, [pc, #376]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	e00b      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002d16:	4b5b      	ldr	r3, [pc, #364]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a5a      	ldr	r2, [pc, #360]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6213      	str	r3, [r2, #32]
 8002d22:	4b58      	ldr	r3, [pc, #352]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a57      	ldr	r2, [pc, #348]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe f955 	bl	8000fe4 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe f951 	bl	8000fe4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0b1      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b4b      	ldr	r3, [pc, #300]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCC_OscConfig+0x37e>
 8002d60:	e014      	b.n	8002d8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe f93f 	bl	8000fe4 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe f93b 	bl	8000fe4 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e09b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	4b40      	ldr	r3, [pc, #256]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b3c      	ldr	r3, [pc, #240]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4a3b      	ldr	r2, [pc, #236]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8087 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da8:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d061      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d146      	bne.n	8002e4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b33      	ldr	r3, [pc, #204]	@ (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fe f90f 	bl	8000fe4 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe f90b 	bl	8000fe4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e06d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df0:	d108      	bne.n	8002e04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002df2:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4921      	ldr	r1, [pc, #132]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e04:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a19      	ldr	r1, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	430b      	orrs	r3, r1
 8002e16:	491b      	ldr	r1, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe f8df 	bl	8000fe4 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe f8db 	bl	8000fe4 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e03d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x46a>
 8002e48:	e035      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe f8c8 	bl	8000fe4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe f8c4 	bl	8000fe4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e026      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x498>
 8002e76:	e01e      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e019      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_OscConfig+0x500>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0d0      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d910      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b67      	ldr	r3, [pc, #412]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4965      	ldr	r1, [pc, #404]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b63      	ldr	r3, [pc, #396]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b8      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f20:	4b59      	ldr	r3, [pc, #356]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a58      	ldr	r2, [pc, #352]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f38:	4b53      	ldr	r3, [pc, #332]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f44:	4b50      	ldr	r3, [pc, #320]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	494d      	ldr	r1, [pc, #308]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d040      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b47      	ldr	r3, [pc, #284]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d115      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e07f      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b41      	ldr	r3, [pc, #260]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e073      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f92:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06b      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa2:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4936      	ldr	r1, [pc, #216]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe f816 	bl	8000fe4 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe f812 	bl	8000fe4 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e053      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 020c 	and.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1eb      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b27      	ldr	r3, [pc, #156]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d210      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4922      	ldr	r1, [pc, #136]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b20      	ldr	r3, [pc, #128]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e032      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4916      	ldr	r1, [pc, #88]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800303e:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	490e      	ldr	r1, [pc, #56]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003052:	f000 f821 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003056:	4602      	mov	r2, r0
 8003058:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	490a      	ldr	r1, [pc, #40]	@ (800308c <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	5ccb      	ldrb	r3, [r1, r3]
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	4a09      	ldr	r2, [pc, #36]	@ (8003090 <HAL_RCC_ClockConfig+0x1cc>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800306e:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <HAL_RCC_ClockConfig+0x1d0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd ff74 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40022000 	.word	0x40022000
 8003088:	40021000 	.word	0x40021000
 800308c:	080051d4 	.word	0x080051d4
 8003090:	20000014 	.word	0x20000014
 8003094:	20000018 	.word	0x20000018

08003098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030b2:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <HAL_RCC_GetSysClockFreq+0x94>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x30>
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x36>
 80030c6:	e027      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ca:	613b      	str	r3, [r7, #16]
      break;
 80030cc:	e027      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	0c9b      	lsrs	r3, r3, #18
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d010      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030e6:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_RCC_GetSysClockFreq+0x94>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0c5b      	lsrs	r3, r3, #17
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	4a11      	ldr	r2, [pc, #68]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fa:	fb03 f202 	mul.w	r2, r3, r2
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e004      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0c      	ldr	r2, [pc, #48]	@ (800313c <HAL_RCC_GetSysClockFreq+0xa4>)
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	613b      	str	r3, [r7, #16]
      break;
 8003116:	e002      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 800311a:	613b      	str	r3, [r7, #16]
      break;
 800311c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311e:	693b      	ldr	r3, [r7, #16]
}
 8003120:	4618      	mov	r0, r3
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	007a1200 	.word	0x007a1200
 8003134:	080051ec 	.word	0x080051ec
 8003138:	080051fc 	.word	0x080051fc
 800313c:	003d0900 	.word	0x003d0900

08003140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b02      	ldr	r3, [pc, #8]	@ (8003150 <HAL_RCC_GetHCLKFreq+0x10>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	20000014 	.word	0x20000014

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff2 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	@ (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	080051e4 	.word	0x080051e4

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffde 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	0adb      	lsrs	r3, r3, #11
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	080051e4 	.word	0x080051e4

080031a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <RCC_Delay+0x34>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <RCC_Delay+0x38>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0a5b      	lsrs	r3, r3, #9
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031c0:	bf00      	nop
  }
  while (Delay --);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1e5a      	subs	r2, r3, #1
 80031c6:	60fa      	str	r2, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f9      	bne.n	80031c0 <RCC_Delay+0x1c>
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	20000014 	.word	0x20000014
 80031dc:	10624dd3 	.word	0x10624dd3

080031e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e041      	b.n	8003276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd fd5a 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f000 fa2a 	bl	8003678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d122      	bne.n	80032da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d11b      	bne.n	80032da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0202 	mvn.w	r2, #2
 80032aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f9bd 	bl	8003640 <HAL_TIM_IC_CaptureCallback>
 80032c6:	e005      	b.n	80032d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f9b0 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f9bf 	bl	8003652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d122      	bne.n	800332e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d11b      	bne.n	800332e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f06f 0204 	mvn.w	r2, #4
 80032fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f993 	bl	8003640 <HAL_TIM_IC_CaptureCallback>
 800331a:	e005      	b.n	8003328 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f986 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f995 	bl	8003652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d122      	bne.n	8003382 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d11b      	bne.n	8003382 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0208 	mvn.w	r2, #8
 8003352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2204      	movs	r2, #4
 8003358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f969 	bl	8003640 <HAL_TIM_IC_CaptureCallback>
 800336e:	e005      	b.n	800337c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f95c 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f96b 	bl	8003652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d122      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b10      	cmp	r3, #16
 800339c:	d11b      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0210 	mvn.w	r2, #16
 80033a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2208      	movs	r2, #8
 80033ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f93f 	bl	8003640 <HAL_TIM_IC_CaptureCallback>
 80033c2:	e005      	b.n	80033d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f932 	bl	800362e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f941 	bl	8003652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d10e      	bne.n	8003402 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0201 	mvn.w	r2, #1
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f90d 	bl	800361c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340c:	2b80      	cmp	r3, #128	@ 0x80
 800340e:	d10e      	bne.n	800342e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b80      	cmp	r3, #128	@ 0x80
 800341c:	d107      	bne.n	800342e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 faaa 	bl	8003982 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003438:	2b40      	cmp	r3, #64	@ 0x40
 800343a:	d10e      	bne.n	800345a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003446:	2b40      	cmp	r3, #64	@ 0x40
 8003448:	d107      	bne.n	800345a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f905 	bl	8003664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d10e      	bne.n	8003486 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	d107      	bne.n	8003486 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f06f 0220 	mvn.w	r2, #32
 800347e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fa75 	bl	8003970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_ConfigClockSource+0x1c>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0b4      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x186>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e2:	d03e      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0xd4>
 80034e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e8:	f200 8087 	bhi.w	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f0:	f000 8086 	beq.w	8003600 <HAL_TIM_ConfigClockSource+0x172>
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f8:	d87f      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 80034fa:	2b70      	cmp	r3, #112	@ 0x70
 80034fc:	d01a      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0xa6>
 80034fe:	2b70      	cmp	r3, #112	@ 0x70
 8003500:	d87b      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 8003502:	2b60      	cmp	r3, #96	@ 0x60
 8003504:	d050      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0x11a>
 8003506:	2b60      	cmp	r3, #96	@ 0x60
 8003508:	d877      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 800350a:	2b50      	cmp	r3, #80	@ 0x50
 800350c:	d03c      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0xfa>
 800350e:	2b50      	cmp	r3, #80	@ 0x50
 8003510:	d873      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 8003512:	2b40      	cmp	r3, #64	@ 0x40
 8003514:	d058      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x13a>
 8003516:	2b40      	cmp	r3, #64	@ 0x40
 8003518:	d86f      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 800351a:	2b30      	cmp	r3, #48	@ 0x30
 800351c:	d064      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15a>
 800351e:	2b30      	cmp	r3, #48	@ 0x30
 8003520:	d86b      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 8003522:	2b20      	cmp	r3, #32
 8003524:	d060      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15a>
 8003526:	2b20      	cmp	r3, #32
 8003528:	d867      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d05c      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15a>
 800352e:	2b10      	cmp	r3, #16
 8003530:	d05a      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15a>
 8003532:	e062      	b.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003544:	f000 f989 	bl	800385a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003556:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	609a      	str	r2, [r3, #8]
      break;
 8003560:	e04f      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003572:	f000 f972 	bl	800385a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003584:	609a      	str	r2, [r3, #8]
      break;
 8003586:	e03c      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003594:	461a      	mov	r2, r3
 8003596:	f000 f8e9 	bl	800376c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2150      	movs	r1, #80	@ 0x50
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f940 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 80035a6:	e02c      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b4:	461a      	mov	r2, r3
 80035b6:	f000 f907 	bl	80037c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2160      	movs	r1, #96	@ 0x60
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f930 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 80035c6:	e01c      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d4:	461a      	mov	r2, r3
 80035d6:	f000 f8c9 	bl	800376c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2140      	movs	r1, #64	@ 0x40
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f920 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 80035e6:	e00c      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 f917 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 80035f8:	e003      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
      break;
 80035fe:	e000      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003600:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
	...

08003678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a33      	ldr	r2, [pc, #204]	@ (8003758 <TIM_Base_SetConfig+0xe0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a32      	ldr	r2, [pc, #200]	@ (800375c <TIM_Base_SetConfig+0xe4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00f      	beq.n	80036b8 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369e:	d00b      	beq.n	80036b8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003760 <TIM_Base_SetConfig+0xe8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <TIM_Base_SetConfig+0x40>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003764 <TIM_Base_SetConfig+0xec>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_Base_SetConfig+0x40>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <TIM_Base_SetConfig+0xf0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d108      	bne.n	80036ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a22      	ldr	r2, [pc, #136]	@ (8003758 <TIM_Base_SetConfig+0xe0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <TIM_Base_SetConfig+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a21      	ldr	r2, [pc, #132]	@ (800375c <TIM_Base_SetConfig+0xe4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00f      	beq.n	80036fa <TIM_Base_SetConfig+0x82>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e0:	d00b      	beq.n	80036fa <TIM_Base_SetConfig+0x82>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <TIM_Base_SetConfig+0xe8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_Base_SetConfig+0x82>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <TIM_Base_SetConfig+0xec>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_Base_SetConfig+0x82>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003768 <TIM_Base_SetConfig+0xf0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a09      	ldr	r2, [pc, #36]	@ (8003758 <TIM_Base_SetConfig+0xe0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a08      	ldr	r2, [pc, #32]	@ (800375c <TIM_Base_SetConfig+0xe4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d103      	bne.n	8003748 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	615a      	str	r2, [r3, #20]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40013400 	.word	0x40013400
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00

0800376c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f023 030a 	bic.w	r3, r3, #10
 80037a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 0210 	bic.w	r2, r3, #16
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	031b      	lsls	r3, r3, #12
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003804:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	621a      	str	r2, [r3, #32]
}
 800381c:	bf00      	nop
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800383c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	f043 0307 	orr.w	r3, r3, #7
 8003848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800385a:	b480      	push	{r7}
 800385c:	b087      	sub	sp, #28
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003874:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	021a      	lsls	r2, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	431a      	orrs	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4313      	orrs	r3, r2
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	609a      	str	r2, [r3, #8]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e050      	b.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d018      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a19      	ldr	r2, [pc, #100]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003906:	d00e      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a14      	ldr	r2, [pc, #80]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a12      	ldr	r2, [pc, #72]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10c      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800392c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00

08003970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e042      	b.n	8003a2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd f9a6 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	@ 0x24
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fe03 	bl	80045e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	@ 0x28
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d16d      	bne.n	8003b30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_UART_Transmit+0x2c>
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e066      	b.n	8003b32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2221      	movs	r2, #33	@ 0x21
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a72:	f7fd fab7 	bl	8000fe4 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Transmit+0x6c>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aa8:	e02a      	b.n	8003b00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2180      	movs	r1, #128	@ 0x80
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fb8b 	bl	80041d0 <UART_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e036      	b.n	8003b32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	3302      	adds	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e007      	b.n	8003af2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	3301      	adds	r3, #1
 8003af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1cf      	bne.n	8003aaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2140      	movs	r1, #64	@ 0x40
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fb5b 	bl	80041d0 <UART_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e006      	b.n	8003b32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b08a      	sub	sp, #40	@ 0x28
 8003b3e:	af02      	add	r7, sp, #8
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d17c      	bne.n	8003c54 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_UART_Receive+0x2c>
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e075      	b.n	8003c56 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2222      	movs	r2, #34	@ 0x22
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd fa31 	bl	8000fe4 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	88fa      	ldrh	r2, [r7, #6]
 8003b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b98:	d108      	bne.n	8003bac <HAL_UART_Receive+0x72>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e003      	b.n	8003bb4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003bb4:	e043      	b.n	8003c3e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fb05 	bl	80041d0 <UART_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e042      	b.n	8003c56 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	3302      	adds	r3, #2
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e01f      	b.n	8003c30 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf8:	d007      	beq.n	8003c0a <HAL_UART_Receive+0xd0>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <HAL_UART_Receive+0xde>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e008      	b.n	8003c2a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1b6      	bne.n	8003bb6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b0ba      	sub	sp, #232	@ 0xe8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x66>
 8003cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fbd1 	bl	8004466 <UART_Receive_IT>
      return;
 8003cc4:	e25b      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80de 	beq.w	8003e8c <HAL_UART_IRQHandler+0x22c>
 8003cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d106      	bne.n	8003cea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80d1 	beq.w	8003e8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_UART_IRQHandler+0xae>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <HAL_UART_IRQHandler+0xd2>
 8003d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f043 0202 	orr.w	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_UART_IRQHandler+0xf6>
 8003d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_UART_IRQHandler+0x126>
 8003d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d105      	bne.n	8003d7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	f043 0208 	orr.w	r2, r3, #8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 81f2 	beq.w	8004174 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_UART_IRQHandler+0x14e>
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fb5c 	bl	8004466 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <HAL_UART_IRQHandler+0x17a>
 8003dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d04f      	beq.n	8003e7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa66 	bl	80042ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d041      	beq.n	8003e72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3314      	adds	r3, #20
 8003df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1d9      	bne.n	8003dee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d013      	beq.n	8003e6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	4a7e      	ldr	r2, [pc, #504]	@ (8004040 <HAL_UART_IRQHandler+0x3e0>)
 8003e48:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd fb7e 	bl	8001550 <HAL_DMA_Abort_IT>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e64:	4610      	mov	r0, r2
 8003e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	e00e      	b.n	8003e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f99c 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	e00a      	b.n	8003e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f998 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	e006      	b.n	8003e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f994 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e86:	e175      	b.n	8004174 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	bf00      	nop
    return;
 8003e8a:	e173      	b.n	8004174 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	f040 814f 	bne.w	8004134 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8148 	beq.w	8004134 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8141 	beq.w	8004134 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80b6 	beq.w	8004044 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ee4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8145 	beq.w	8004178 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	f080 813e 	bcs.w	8004178 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	f000 8088 	beq.w	8004020 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f3c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f48:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1d9      	bne.n	8003f10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3314      	adds	r3, #20
 8003f62:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f80:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e1      	bne.n	8003f5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fc2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e3      	bne.n	8003f98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff0:	f023 0310 	bic.w	r3, r3, #16
 8003ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004002:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004004:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004008:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e3      	bne.n	8003fde <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd fa5d 	bl	80014da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800402e:	b29b      	uxth	r3, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f8bf 	bl	80041ba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800403c:	e09c      	b.n	8004178 <HAL_UART_IRQHandler+0x518>
 800403e:	bf00      	nop
 8004040:	08004371 	.word	0x08004371
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800404c:	b29b      	uxth	r3, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 808e 	beq.w	800417c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8089 	beq.w	800417c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800407a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004080:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800408e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004090:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004094:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800409c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e3      	bne.n	800406a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3314      	adds	r3, #20
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	623b      	str	r3, [r7, #32]
   return(result);
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80040c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e3      	bne.n	80040a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800410c:	61fa      	str	r2, [r7, #28]
 800410e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	69b9      	ldr	r1, [r7, #24]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	617b      	str	r3, [r7, #20]
   return(result);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e3      	bne.n	80040e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004126:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f844 	bl	80041ba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004132:	e023      	b.n	800417c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_UART_IRQHandler+0x4f4>
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f923 	bl	8004398 <UART_Transmit_IT>
    return;
 8004152:	e014      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <HAL_UART_IRQHandler+0x51e>
 8004160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f962 	bl	8004436 <UART_EndTransmit_IT>
    return;
 8004172:	e004      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
    return;
 8004174:	bf00      	nop
 8004176:	e002      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
      return;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
      return;
 800417c:	bf00      	nop
  }
}
 800417e:	37e8      	adds	r7, #232	@ 0xe8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b090      	sub	sp, #64	@ 0x40
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	4613      	mov	r3, r2
 80041de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e0:	e050      	b.n	8004284 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e8:	d04c      	beq.n	8004284 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f0:	f7fc fef8 	bl	8000fe4 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d241      	bcs.n	8004284 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004220:	637a      	str	r2, [r7, #52]	@ 0x34
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800422e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3314      	adds	r3, #20
 800423a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	613b      	str	r3, [r7, #16]
   return(result);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3314      	adds	r3, #20
 8004252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004254:	623a      	str	r2, [r7, #32]
 8004256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	6a3a      	ldr	r2, [r7, #32]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	61bb      	str	r3, [r7, #24]
   return(result);
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e5      	bne.n	8004234 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e00f      	b.n	80042a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4013      	ands	r3, r2
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d09f      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3740      	adds	r7, #64	@ 0x40
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b095      	sub	sp, #84	@ 0x54
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80042d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004308:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800430a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800430e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e5      	bne.n	80042e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	2b01      	cmp	r3, #1
 8004322:	d119      	bne.n	8004358 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	60bb      	str	r3, [r7, #8]
   return(result);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 0310 	bic.w	r3, r3, #16
 800433a:	647b      	str	r3, [r7, #68]	@ 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004344:	61ba      	str	r2, [r7, #24]
 8004346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6979      	ldr	r1, [r7, #20]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	613b      	str	r3, [r7, #16]
   return(result);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004366:	bf00      	nop
 8004368:	3754      	adds	r7, #84	@ 0x54
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff ff0c 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b21      	cmp	r3, #33	@ 0x21
 80043aa:	d13e      	bne.n	800442a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b4:	d114      	bne.n	80043e0 <UART_Transmit_IT+0x48>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d110      	bne.n	80043e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]
 80043de:	e008      	b.n	80043f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6211      	str	r1, [r2, #32]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4619      	mov	r1, r3
 8004400:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004414:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004424:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
  }
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800444c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fe94 	bl	8004184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08c      	sub	sp, #48	@ 0x30
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b22      	cmp	r3, #34	@ 0x22
 8004478:	f040 80ae 	bne.w	80045d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004484:	d117      	bne.n	80044b6 <UART_Receive_IT+0x50>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d113      	bne.n	80044b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	1c9a      	adds	r2, r3, #2
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044b4:	e026      	b.n	8004504 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c8:	d007      	beq.n	80044da <UART_Receive_IT+0x74>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <UART_Receive_IT+0x82>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e008      	b.n	80044fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004514:	2b00      	cmp	r3, #0
 8004516:	d15d      	bne.n	80045d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0220 	bic.w	r2, r2, #32
 8004526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	2b01      	cmp	r3, #1
 800455c:	d135      	bne.n	80045ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	613b      	str	r3, [r7, #16]
   return(result);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f023 0310 	bic.w	r3, r3, #16
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	623a      	str	r2, [r7, #32]
 8004586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	69f9      	ldr	r1, [r7, #28]
 800458a:	6a3a      	ldr	r2, [r7, #32]
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	61bb      	str	r3, [r7, #24]
   return(result);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d10a      	bne.n	80045bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fdf9 	bl	80041ba <HAL_UARTEx_RxEventCallback>
 80045c8:	e002      	b.n	80045d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fde3 	bl	8004196 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e002      	b.n	80045da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3730      	adds	r7, #48	@ 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800461e:	f023 030c 	bic.w	r3, r3, #12
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	430b      	orrs	r3, r1
 800462a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2c      	ldr	r2, [pc, #176]	@ (80046f8 <UART_SetConfig+0x114>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d103      	bne.n	8004654 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7fe fd96 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	e002      	b.n	800465a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004654:	f7fe fd7e 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004658:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009a      	lsls	r2, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	4a22      	ldr	r2, [pc, #136]	@ (80046fc <UART_SetConfig+0x118>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	0119      	lsls	r1, r3, #4
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009a      	lsls	r2, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004690:	4b1a      	ldr	r3, [pc, #104]	@ (80046fc <UART_SetConfig+0x118>)
 8004692:	fba3 0302 	umull	r0, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2064      	movs	r0, #100	@ 0x64
 800469a:	fb00 f303 	mul.w	r3, r0, r3
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	3332      	adds	r3, #50	@ 0x32
 80046a4:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <UART_SetConfig+0x118>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046b0:	4419      	add	r1, r3
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009a      	lsls	r2, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c8:	4b0c      	ldr	r3, [pc, #48]	@ (80046fc <UART_SetConfig+0x118>)
 80046ca:	fba3 0302 	umull	r0, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2064      	movs	r0, #100	@ 0x64
 80046d2:	fb00 f303 	mul.w	r3, r0, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	3332      	adds	r3, #50	@ 0x32
 80046dc:	4a07      	ldr	r2, [pc, #28]	@ (80046fc <UART_SetConfig+0x118>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	f003 020f 	and.w	r2, r3, #15
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	440a      	add	r2, r1
 80046ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40013800 	.word	0x40013800
 80046fc:	51eb851f 	.word	0x51eb851f

08004700 <sniprintf>:
 8004700:	b40c      	push	{r2, r3}
 8004702:	b530      	push	{r4, r5, lr}
 8004704:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <sniprintf+0x64>)
 8004706:	1e0c      	subs	r4, r1, #0
 8004708:	681d      	ldr	r5, [r3, #0]
 800470a:	b09d      	sub	sp, #116	@ 0x74
 800470c:	da08      	bge.n	8004720 <sniprintf+0x20>
 800470e:	238b      	movs	r3, #139	@ 0x8b
 8004710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	b01d      	add	sp, #116	@ 0x74
 8004718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800471c:	b002      	add	sp, #8
 800471e:	4770      	bx	lr
 8004720:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004724:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004728:	bf0c      	ite	eq
 800472a:	4623      	moveq	r3, r4
 800472c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	9307      	str	r3, [sp, #28]
 8004734:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004738:	9002      	str	r0, [sp, #8]
 800473a:	9006      	str	r0, [sp, #24]
 800473c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004740:	4628      	mov	r0, r5
 8004742:	ab21      	add	r3, sp, #132	@ 0x84
 8004744:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004746:	a902      	add	r1, sp, #8
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	f000 f8b3 	bl	80048b4 <_svfiprintf_r>
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	bfbc      	itt	lt
 8004752:	238b      	movlt	r3, #139	@ 0x8b
 8004754:	602b      	strlt	r3, [r5, #0]
 8004756:	2c00      	cmp	r4, #0
 8004758:	d0dd      	beq.n	8004716 <sniprintf+0x16>
 800475a:	2200      	movs	r2, #0
 800475c:	9b02      	ldr	r3, [sp, #8]
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e7d9      	b.n	8004716 <sniprintf+0x16>
 8004762:	bf00      	nop
 8004764:	20000020 	.word	0x20000020

08004768 <strstr>:
 8004768:	780a      	ldrb	r2, [r1, #0]
 800476a:	b570      	push	{r4, r5, r6, lr}
 800476c:	b96a      	cbnz	r2, 800478a <strstr+0x22>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	429a      	cmp	r2, r3
 8004772:	d109      	bne.n	8004788 <strstr+0x20>
 8004774:	460c      	mov	r4, r1
 8004776:	4605      	mov	r5, r0
 8004778:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f6      	beq.n	800476e <strstr+0x6>
 8004780:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004784:	429e      	cmp	r6, r3
 8004786:	d0f7      	beq.n	8004778 <strstr+0x10>
 8004788:	3001      	adds	r0, #1
 800478a:	7803      	ldrb	r3, [r0, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ef      	bne.n	8004770 <strstr+0x8>
 8004790:	4618      	mov	r0, r3
 8004792:	e7ec      	b.n	800476e <strstr+0x6>

08004794 <memset>:
 8004794:	4603      	mov	r3, r0
 8004796:	4402      	add	r2, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <memset+0xa>
 800479c:	4770      	bx	lr
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <memset+0x4>

080047a4 <__errno>:
 80047a4:	4b01      	ldr	r3, [pc, #4]	@ (80047ac <__errno+0x8>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000020 	.word	0x20000020

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	2600      	movs	r6, #0
 80047b4:	4d0c      	ldr	r5, [pc, #48]	@ (80047e8 <__libc_init_array+0x38>)
 80047b6:	4c0d      	ldr	r4, [pc, #52]	@ (80047ec <__libc_init_array+0x3c>)
 80047b8:	1b64      	subs	r4, r4, r5
 80047ba:	10a4      	asrs	r4, r4, #2
 80047bc:	42a6      	cmp	r6, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	f000 fc78 	bl	80050b4 <_init>
 80047c4:	2600      	movs	r6, #0
 80047c6:	4d0a      	ldr	r5, [pc, #40]	@ (80047f0 <__libc_init_array+0x40>)
 80047c8:	4c0a      	ldr	r4, [pc, #40]	@ (80047f4 <__libc_init_array+0x44>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d8:	4798      	blx	r3
 80047da:	3601      	adds	r6, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e2:	4798      	blx	r3
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	0800523c 	.word	0x0800523c
 80047ec:	0800523c 	.word	0x0800523c
 80047f0:	0800523c 	.word	0x0800523c
 80047f4:	08005240 	.word	0x08005240

080047f8 <__retarget_lock_acquire_recursive>:
 80047f8:	4770      	bx	lr

080047fa <__retarget_lock_release_recursive>:
 80047fa:	4770      	bx	lr

080047fc <__ssputs_r>:
 80047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	461f      	mov	r7, r3
 8004802:	688e      	ldr	r6, [r1, #8]
 8004804:	4682      	mov	sl, r0
 8004806:	42be      	cmp	r6, r7
 8004808:	460c      	mov	r4, r1
 800480a:	4690      	mov	r8, r2
 800480c:	680b      	ldr	r3, [r1, #0]
 800480e:	d82d      	bhi.n	800486c <__ssputs_r+0x70>
 8004810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004814:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004818:	d026      	beq.n	8004868 <__ssputs_r+0x6c>
 800481a:	6965      	ldr	r5, [r4, #20]
 800481c:	6909      	ldr	r1, [r1, #16]
 800481e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004822:	eba3 0901 	sub.w	r9, r3, r1
 8004826:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800482a:	1c7b      	adds	r3, r7, #1
 800482c:	444b      	add	r3, r9
 800482e:	106d      	asrs	r5, r5, #1
 8004830:	429d      	cmp	r5, r3
 8004832:	bf38      	it	cc
 8004834:	461d      	movcc	r5, r3
 8004836:	0553      	lsls	r3, r2, #21
 8004838:	d527      	bpl.n	800488a <__ssputs_r+0x8e>
 800483a:	4629      	mov	r1, r5
 800483c:	f000 f958 	bl	8004af0 <_malloc_r>
 8004840:	4606      	mov	r6, r0
 8004842:	b360      	cbz	r0, 800489e <__ssputs_r+0xa2>
 8004844:	464a      	mov	r2, r9
 8004846:	6921      	ldr	r1, [r4, #16]
 8004848:	f000 fbd6 	bl	8004ff8 <memcpy>
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004856:	81a3      	strh	r3, [r4, #12]
 8004858:	6126      	str	r6, [r4, #16]
 800485a:	444e      	add	r6, r9
 800485c:	6026      	str	r6, [r4, #0]
 800485e:	463e      	mov	r6, r7
 8004860:	6165      	str	r5, [r4, #20]
 8004862:	eba5 0509 	sub.w	r5, r5, r9
 8004866:	60a5      	str	r5, [r4, #8]
 8004868:	42be      	cmp	r6, r7
 800486a:	d900      	bls.n	800486e <__ssputs_r+0x72>
 800486c:	463e      	mov	r6, r7
 800486e:	4632      	mov	r2, r6
 8004870:	4641      	mov	r1, r8
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	f000 fb88 	bl	8004f88 <memmove>
 8004878:	2000      	movs	r0, #0
 800487a:	68a3      	ldr	r3, [r4, #8]
 800487c:	1b9b      	subs	r3, r3, r6
 800487e:	60a3      	str	r3, [r4, #8]
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	4433      	add	r3, r6
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488a:	462a      	mov	r2, r5
 800488c:	f000 fb4e 	bl	8004f2c <_realloc_r>
 8004890:	4606      	mov	r6, r0
 8004892:	2800      	cmp	r0, #0
 8004894:	d1e0      	bne.n	8004858 <__ssputs_r+0x5c>
 8004896:	4650      	mov	r0, sl
 8004898:	6921      	ldr	r1, [r4, #16]
 800489a:	f000 fbbb 	bl	8005014 <_free_r>
 800489e:	230c      	movs	r3, #12
 80048a0:	f8ca 3000 	str.w	r3, [sl]
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	e7e9      	b.n	8004886 <__ssputs_r+0x8a>
	...

080048b4 <_svfiprintf_r>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	4698      	mov	r8, r3
 80048ba:	898b      	ldrh	r3, [r1, #12]
 80048bc:	4607      	mov	r7, r0
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	460d      	mov	r5, r1
 80048c2:	4614      	mov	r4, r2
 80048c4:	b09d      	sub	sp, #116	@ 0x74
 80048c6:	d510      	bpl.n	80048ea <_svfiprintf_r+0x36>
 80048c8:	690b      	ldr	r3, [r1, #16]
 80048ca:	b973      	cbnz	r3, 80048ea <_svfiprintf_r+0x36>
 80048cc:	2140      	movs	r1, #64	@ 0x40
 80048ce:	f000 f90f 	bl	8004af0 <_malloc_r>
 80048d2:	6028      	str	r0, [r5, #0]
 80048d4:	6128      	str	r0, [r5, #16]
 80048d6:	b930      	cbnz	r0, 80048e6 <_svfiprintf_r+0x32>
 80048d8:	230c      	movs	r3, #12
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048e0:	b01d      	add	sp, #116	@ 0x74
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	2340      	movs	r3, #64	@ 0x40
 80048e8:	616b      	str	r3, [r5, #20]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ee:	2320      	movs	r3, #32
 80048f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048f4:	2330      	movs	r3, #48	@ 0x30
 80048f6:	f04f 0901 	mov.w	r9, #1
 80048fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80048fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004a98 <_svfiprintf_r+0x1e4>
 8004902:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004906:	4623      	mov	r3, r4
 8004908:	469a      	mov	sl, r3
 800490a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490e:	b10a      	cbz	r2, 8004914 <_svfiprintf_r+0x60>
 8004910:	2a25      	cmp	r2, #37	@ 0x25
 8004912:	d1f9      	bne.n	8004908 <_svfiprintf_r+0x54>
 8004914:	ebba 0b04 	subs.w	fp, sl, r4
 8004918:	d00b      	beq.n	8004932 <_svfiprintf_r+0x7e>
 800491a:	465b      	mov	r3, fp
 800491c:	4622      	mov	r2, r4
 800491e:	4629      	mov	r1, r5
 8004920:	4638      	mov	r0, r7
 8004922:	f7ff ff6b 	bl	80047fc <__ssputs_r>
 8004926:	3001      	adds	r0, #1
 8004928:	f000 80a7 	beq.w	8004a7a <_svfiprintf_r+0x1c6>
 800492c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800492e:	445a      	add	r2, fp
 8004930:	9209      	str	r2, [sp, #36]	@ 0x24
 8004932:	f89a 3000 	ldrb.w	r3, [sl]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 809f 	beq.w	8004a7a <_svfiprintf_r+0x1c6>
 800493c:	2300      	movs	r3, #0
 800493e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004946:	f10a 0a01 	add.w	sl, sl, #1
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004952:	931a      	str	r3, [sp, #104]	@ 0x68
 8004954:	4654      	mov	r4, sl
 8004956:	2205      	movs	r2, #5
 8004958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495c:	484e      	ldr	r0, [pc, #312]	@ (8004a98 <_svfiprintf_r+0x1e4>)
 800495e:	f000 fb3d 	bl	8004fdc <memchr>
 8004962:	9a04      	ldr	r2, [sp, #16]
 8004964:	b9d8      	cbnz	r0, 800499e <_svfiprintf_r+0xea>
 8004966:	06d0      	lsls	r0, r2, #27
 8004968:	bf44      	itt	mi
 800496a:	2320      	movmi	r3, #32
 800496c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004970:	0711      	lsls	r1, r2, #28
 8004972:	bf44      	itt	mi
 8004974:	232b      	movmi	r3, #43	@ 0x2b
 8004976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800497a:	f89a 3000 	ldrb.w	r3, [sl]
 800497e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004980:	d015      	beq.n	80049ae <_svfiprintf_r+0xfa>
 8004982:	4654      	mov	r4, sl
 8004984:	2000      	movs	r0, #0
 8004986:	f04f 0c0a 	mov.w	ip, #10
 800498a:	9a07      	ldr	r2, [sp, #28]
 800498c:	4621      	mov	r1, r4
 800498e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004992:	3b30      	subs	r3, #48	@ 0x30
 8004994:	2b09      	cmp	r3, #9
 8004996:	d94b      	bls.n	8004a30 <_svfiprintf_r+0x17c>
 8004998:	b1b0      	cbz	r0, 80049c8 <_svfiprintf_r+0x114>
 800499a:	9207      	str	r2, [sp, #28]
 800499c:	e014      	b.n	80049c8 <_svfiprintf_r+0x114>
 800499e:	eba0 0308 	sub.w	r3, r0, r8
 80049a2:	fa09 f303 	lsl.w	r3, r9, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	46a2      	mov	sl, r4
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	e7d2      	b.n	8004954 <_svfiprintf_r+0xa0>
 80049ae:	9b03      	ldr	r3, [sp, #12]
 80049b0:	1d19      	adds	r1, r3, #4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	9103      	str	r1, [sp, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bfbb      	ittet	lt
 80049ba:	425b      	neglt	r3, r3
 80049bc:	f042 0202 	orrlt.w	r2, r2, #2
 80049c0:	9307      	strge	r3, [sp, #28]
 80049c2:	9307      	strlt	r3, [sp, #28]
 80049c4:	bfb8      	it	lt
 80049c6:	9204      	strlt	r2, [sp, #16]
 80049c8:	7823      	ldrb	r3, [r4, #0]
 80049ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80049cc:	d10a      	bne.n	80049e4 <_svfiprintf_r+0x130>
 80049ce:	7863      	ldrb	r3, [r4, #1]
 80049d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d2:	d132      	bne.n	8004a3a <_svfiprintf_r+0x186>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	3402      	adds	r4, #2
 80049d8:	1d1a      	adds	r2, r3, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	9203      	str	r2, [sp, #12]
 80049de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049e2:	9305      	str	r3, [sp, #20]
 80049e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004a9c <_svfiprintf_r+0x1e8>
 80049e8:	2203      	movs	r2, #3
 80049ea:	4650      	mov	r0, sl
 80049ec:	7821      	ldrb	r1, [r4, #0]
 80049ee:	f000 faf5 	bl	8004fdc <memchr>
 80049f2:	b138      	cbz	r0, 8004a04 <_svfiprintf_r+0x150>
 80049f4:	2240      	movs	r2, #64	@ 0x40
 80049f6:	9b04      	ldr	r3, [sp, #16]
 80049f8:	eba0 000a 	sub.w	r0, r0, sl
 80049fc:	4082      	lsls	r2, r0
 80049fe:	4313      	orrs	r3, r2
 8004a00:	3401      	adds	r4, #1
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a08:	2206      	movs	r2, #6
 8004a0a:	4825      	ldr	r0, [pc, #148]	@ (8004aa0 <_svfiprintf_r+0x1ec>)
 8004a0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a10:	f000 fae4 	bl	8004fdc <memchr>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d036      	beq.n	8004a86 <_svfiprintf_r+0x1d2>
 8004a18:	4b22      	ldr	r3, [pc, #136]	@ (8004aa4 <_svfiprintf_r+0x1f0>)
 8004a1a:	bb1b      	cbnz	r3, 8004a64 <_svfiprintf_r+0x1b0>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	3307      	adds	r3, #7
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	3308      	adds	r3, #8
 8004a26:	9303      	str	r3, [sp, #12]
 8004a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a2a:	4433      	add	r3, r6
 8004a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a2e:	e76a      	b.n	8004906 <_svfiprintf_r+0x52>
 8004a30:	460c      	mov	r4, r1
 8004a32:	2001      	movs	r0, #1
 8004a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a38:	e7a8      	b.n	800498c <_svfiprintf_r+0xd8>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f04f 0c0a 	mov.w	ip, #10
 8004a40:	4619      	mov	r1, r3
 8004a42:	3401      	adds	r4, #1
 8004a44:	9305      	str	r3, [sp, #20]
 8004a46:	4620      	mov	r0, r4
 8004a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4c:	3a30      	subs	r2, #48	@ 0x30
 8004a4e:	2a09      	cmp	r2, #9
 8004a50:	d903      	bls.n	8004a5a <_svfiprintf_r+0x1a6>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0c6      	beq.n	80049e4 <_svfiprintf_r+0x130>
 8004a56:	9105      	str	r1, [sp, #20]
 8004a58:	e7c4      	b.n	80049e4 <_svfiprintf_r+0x130>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a62:	e7f0      	b.n	8004a46 <_svfiprintf_r+0x192>
 8004a64:	ab03      	add	r3, sp, #12
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <_svfiprintf_r+0x1f4>)
 8004a6e:	a904      	add	r1, sp, #16
 8004a70:	f3af 8000 	nop.w
 8004a74:	1c42      	adds	r2, r0, #1
 8004a76:	4606      	mov	r6, r0
 8004a78:	d1d6      	bne.n	8004a28 <_svfiprintf_r+0x174>
 8004a7a:	89ab      	ldrh	r3, [r5, #12]
 8004a7c:	065b      	lsls	r3, r3, #25
 8004a7e:	f53f af2d 	bmi.w	80048dc <_svfiprintf_r+0x28>
 8004a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a84:	e72c      	b.n	80048e0 <_svfiprintf_r+0x2c>
 8004a86:	ab03      	add	r3, sp, #12
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <_svfiprintf_r+0x1f4>)
 8004a90:	a904      	add	r1, sp, #16
 8004a92:	f000 f91f 	bl	8004cd4 <_printf_i>
 8004a96:	e7ed      	b.n	8004a74 <_svfiprintf_r+0x1c0>
 8004a98:	080051fe 	.word	0x080051fe
 8004a9c:	08005204 	.word	0x08005204
 8004aa0:	08005208 	.word	0x08005208
 8004aa4:	00000000 	.word	0x00000000
 8004aa8:	080047fd 	.word	0x080047fd

08004aac <sbrk_aligned>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	4e0f      	ldr	r6, [pc, #60]	@ (8004aec <sbrk_aligned+0x40>)
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	6831      	ldr	r1, [r6, #0]
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	b911      	cbnz	r1, 8004abe <sbrk_aligned+0x12>
 8004ab8:	f000 fa80 	bl	8004fbc <_sbrk_r>
 8004abc:	6030      	str	r0, [r6, #0]
 8004abe:	4621      	mov	r1, r4
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 fa7b 	bl	8004fbc <_sbrk_r>
 8004ac6:	1c43      	adds	r3, r0, #1
 8004ac8:	d103      	bne.n	8004ad2 <sbrk_aligned+0x26>
 8004aca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ace:	4620      	mov	r0, r4
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
 8004ad2:	1cc4      	adds	r4, r0, #3
 8004ad4:	f024 0403 	bic.w	r4, r4, #3
 8004ad8:	42a0      	cmp	r0, r4
 8004ada:	d0f8      	beq.n	8004ace <sbrk_aligned+0x22>
 8004adc:	1a21      	subs	r1, r4, r0
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f000 fa6c 	bl	8004fbc <_sbrk_r>
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d1f2      	bne.n	8004ace <sbrk_aligned+0x22>
 8004ae8:	e7ef      	b.n	8004aca <sbrk_aligned+0x1e>
 8004aea:	bf00      	nop
 8004aec:	2000031c 	.word	0x2000031c

08004af0 <_malloc_r>:
 8004af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af4:	1ccd      	adds	r5, r1, #3
 8004af6:	f025 0503 	bic.w	r5, r5, #3
 8004afa:	3508      	adds	r5, #8
 8004afc:	2d0c      	cmp	r5, #12
 8004afe:	bf38      	it	cc
 8004b00:	250c      	movcc	r5, #12
 8004b02:	2d00      	cmp	r5, #0
 8004b04:	4606      	mov	r6, r0
 8004b06:	db01      	blt.n	8004b0c <_malloc_r+0x1c>
 8004b08:	42a9      	cmp	r1, r5
 8004b0a:	d904      	bls.n	8004b16 <_malloc_r+0x26>
 8004b0c:	230c      	movs	r3, #12
 8004b0e:	6033      	str	r3, [r6, #0]
 8004b10:	2000      	movs	r0, #0
 8004b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bec <_malloc_r+0xfc>
 8004b1a:	f000 f9fb 	bl	8004f14 <__malloc_lock>
 8004b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b22:	461c      	mov	r4, r3
 8004b24:	bb44      	cbnz	r4, 8004b78 <_malloc_r+0x88>
 8004b26:	4629      	mov	r1, r5
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f7ff ffbf 	bl	8004aac <sbrk_aligned>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	4604      	mov	r4, r0
 8004b32:	d158      	bne.n	8004be6 <_malloc_r+0xf6>
 8004b34:	f8d8 4000 	ldr.w	r4, [r8]
 8004b38:	4627      	mov	r7, r4
 8004b3a:	2f00      	cmp	r7, #0
 8004b3c:	d143      	bne.n	8004bc6 <_malloc_r+0xd6>
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	d04b      	beq.n	8004bda <_malloc_r+0xea>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	4639      	mov	r1, r7
 8004b46:	4630      	mov	r0, r6
 8004b48:	eb04 0903 	add.w	r9, r4, r3
 8004b4c:	f000 fa36 	bl	8004fbc <_sbrk_r>
 8004b50:	4581      	cmp	r9, r0
 8004b52:	d142      	bne.n	8004bda <_malloc_r+0xea>
 8004b54:	6821      	ldr	r1, [r4, #0]
 8004b56:	4630      	mov	r0, r6
 8004b58:	1a6d      	subs	r5, r5, r1
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	f7ff ffa6 	bl	8004aac <sbrk_aligned>
 8004b60:	3001      	adds	r0, #1
 8004b62:	d03a      	beq.n	8004bda <_malloc_r+0xea>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	442b      	add	r3, r5
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	bb62      	cbnz	r2, 8004bcc <_malloc_r+0xdc>
 8004b72:	f8c8 7000 	str.w	r7, [r8]
 8004b76:	e00f      	b.n	8004b98 <_malloc_r+0xa8>
 8004b78:	6822      	ldr	r2, [r4, #0]
 8004b7a:	1b52      	subs	r2, r2, r5
 8004b7c:	d420      	bmi.n	8004bc0 <_malloc_r+0xd0>
 8004b7e:	2a0b      	cmp	r2, #11
 8004b80:	d917      	bls.n	8004bb2 <_malloc_r+0xc2>
 8004b82:	1961      	adds	r1, r4, r5
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	6025      	str	r5, [r4, #0]
 8004b88:	bf18      	it	ne
 8004b8a:	6059      	strne	r1, [r3, #4]
 8004b8c:	6863      	ldr	r3, [r4, #4]
 8004b8e:	bf08      	it	eq
 8004b90:	f8c8 1000 	streq.w	r1, [r8]
 8004b94:	5162      	str	r2, [r4, r5]
 8004b96:	604b      	str	r3, [r1, #4]
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f000 f9c1 	bl	8004f20 <__malloc_unlock>
 8004b9e:	f104 000b 	add.w	r0, r4, #11
 8004ba2:	1d23      	adds	r3, r4, #4
 8004ba4:	f020 0007 	bic.w	r0, r0, #7
 8004ba8:	1ac2      	subs	r2, r0, r3
 8004baa:	bf1c      	itt	ne
 8004bac:	1a1b      	subne	r3, r3, r0
 8004bae:	50a3      	strne	r3, [r4, r2]
 8004bb0:	e7af      	b.n	8004b12 <_malloc_r+0x22>
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	bf0c      	ite	eq
 8004bb8:	f8c8 2000 	streq.w	r2, [r8]
 8004bbc:	605a      	strne	r2, [r3, #4]
 8004bbe:	e7eb      	b.n	8004b98 <_malloc_r+0xa8>
 8004bc0:	4623      	mov	r3, r4
 8004bc2:	6864      	ldr	r4, [r4, #4]
 8004bc4:	e7ae      	b.n	8004b24 <_malloc_r+0x34>
 8004bc6:	463c      	mov	r4, r7
 8004bc8:	687f      	ldr	r7, [r7, #4]
 8004bca:	e7b6      	b.n	8004b3a <_malloc_r+0x4a>
 8004bcc:	461a      	mov	r2, r3
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d1fb      	bne.n	8004bcc <_malloc_r+0xdc>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6053      	str	r3, [r2, #4]
 8004bd8:	e7de      	b.n	8004b98 <_malloc_r+0xa8>
 8004bda:	230c      	movs	r3, #12
 8004bdc:	4630      	mov	r0, r6
 8004bde:	6033      	str	r3, [r6, #0]
 8004be0:	f000 f99e 	bl	8004f20 <__malloc_unlock>
 8004be4:	e794      	b.n	8004b10 <_malloc_r+0x20>
 8004be6:	6005      	str	r5, [r0, #0]
 8004be8:	e7d6      	b.n	8004b98 <_malloc_r+0xa8>
 8004bea:	bf00      	nop
 8004bec:	20000320 	.word	0x20000320

08004bf0 <_printf_common>:
 8004bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	4698      	mov	r8, r3
 8004bf8:	688a      	ldr	r2, [r1, #8]
 8004bfa:	690b      	ldr	r3, [r1, #16]
 8004bfc:	4607      	mov	r7, r0
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	bfb8      	it	lt
 8004c02:	4613      	movlt	r3, r2
 8004c04:	6033      	str	r3, [r6, #0]
 8004c06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c10:	b10a      	cbz	r2, 8004c16 <_printf_common+0x26>
 8004c12:	3301      	adds	r3, #1
 8004c14:	6033      	str	r3, [r6, #0]
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	0699      	lsls	r1, r3, #26
 8004c1a:	bf42      	ittt	mi
 8004c1c:	6833      	ldrmi	r3, [r6, #0]
 8004c1e:	3302      	addmi	r3, #2
 8004c20:	6033      	strmi	r3, [r6, #0]
 8004c22:	6825      	ldr	r5, [r4, #0]
 8004c24:	f015 0506 	ands.w	r5, r5, #6
 8004c28:	d106      	bne.n	8004c38 <_printf_common+0x48>
 8004c2a:	f104 0a19 	add.w	sl, r4, #25
 8004c2e:	68e3      	ldr	r3, [r4, #12]
 8004c30:	6832      	ldr	r2, [r6, #0]
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	42ab      	cmp	r3, r5
 8004c36:	dc2b      	bgt.n	8004c90 <_printf_common+0xa0>
 8004c38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c3c:	6822      	ldr	r2, [r4, #0]
 8004c3e:	3b00      	subs	r3, #0
 8004c40:	bf18      	it	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	0692      	lsls	r2, r2, #26
 8004c46:	d430      	bmi.n	8004caa <_printf_common+0xba>
 8004c48:	4641      	mov	r1, r8
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c50:	47c8      	blx	r9
 8004c52:	3001      	adds	r0, #1
 8004c54:	d023      	beq.n	8004c9e <_printf_common+0xae>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	6922      	ldr	r2, [r4, #16]
 8004c5a:	f003 0306 	and.w	r3, r3, #6
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	bf14      	ite	ne
 8004c62:	2500      	movne	r5, #0
 8004c64:	6833      	ldreq	r3, [r6, #0]
 8004c66:	f04f 0600 	mov.w	r6, #0
 8004c6a:	bf08      	it	eq
 8004c6c:	68e5      	ldreq	r5, [r4, #12]
 8004c6e:	f104 041a 	add.w	r4, r4, #26
 8004c72:	bf08      	it	eq
 8004c74:	1aed      	subeq	r5, r5, r3
 8004c76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c7a:	bf08      	it	eq
 8004c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c80:	4293      	cmp	r3, r2
 8004c82:	bfc4      	itt	gt
 8004c84:	1a9b      	subgt	r3, r3, r2
 8004c86:	18ed      	addgt	r5, r5, r3
 8004c88:	42b5      	cmp	r5, r6
 8004c8a:	d11a      	bne.n	8004cc2 <_printf_common+0xd2>
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e008      	b.n	8004ca2 <_printf_common+0xb2>
 8004c90:	2301      	movs	r3, #1
 8004c92:	4652      	mov	r2, sl
 8004c94:	4641      	mov	r1, r8
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c8      	blx	r9
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d103      	bne.n	8004ca6 <_printf_common+0xb6>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	e7c1      	b.n	8004c2e <_printf_common+0x3e>
 8004caa:	2030      	movs	r0, #48	@ 0x30
 8004cac:	18e1      	adds	r1, r4, r3
 8004cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cb8:	4422      	add	r2, r4
 8004cba:	3302      	adds	r3, #2
 8004cbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cc0:	e7c2      	b.n	8004c48 <_printf_common+0x58>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	4638      	mov	r0, r7
 8004cca:	47c8      	blx	r9
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d0e6      	beq.n	8004c9e <_printf_common+0xae>
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7d9      	b.n	8004c88 <_printf_common+0x98>

08004cd4 <_printf_i>:
 8004cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	7e0f      	ldrb	r7, [r1, #24]
 8004cda:	4691      	mov	r9, r2
 8004cdc:	2f78      	cmp	r7, #120	@ 0x78
 8004cde:	4680      	mov	r8, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	469a      	mov	sl, r3
 8004ce4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cea:	d807      	bhi.n	8004cfc <_printf_i+0x28>
 8004cec:	2f62      	cmp	r7, #98	@ 0x62
 8004cee:	d80a      	bhi.n	8004d06 <_printf_i+0x32>
 8004cf0:	2f00      	cmp	r7, #0
 8004cf2:	f000 80d3 	beq.w	8004e9c <_printf_i+0x1c8>
 8004cf6:	2f58      	cmp	r7, #88	@ 0x58
 8004cf8:	f000 80ba 	beq.w	8004e70 <_printf_i+0x19c>
 8004cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d04:	e03a      	b.n	8004d7c <_printf_i+0xa8>
 8004d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d0a:	2b15      	cmp	r3, #21
 8004d0c:	d8f6      	bhi.n	8004cfc <_printf_i+0x28>
 8004d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d14 <_printf_i+0x40>)
 8004d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d81 	.word	0x08004d81
 8004d1c:	08004cfd 	.word	0x08004cfd
 8004d20:	08004cfd 	.word	0x08004cfd
 8004d24:	08004cfd 	.word	0x08004cfd
 8004d28:	08004cfd 	.word	0x08004cfd
 8004d2c:	08004d81 	.word	0x08004d81
 8004d30:	08004cfd 	.word	0x08004cfd
 8004d34:	08004cfd 	.word	0x08004cfd
 8004d38:	08004cfd 	.word	0x08004cfd
 8004d3c:	08004cfd 	.word	0x08004cfd
 8004d40:	08004e83 	.word	0x08004e83
 8004d44:	08004dab 	.word	0x08004dab
 8004d48:	08004e3d 	.word	0x08004e3d
 8004d4c:	08004cfd 	.word	0x08004cfd
 8004d50:	08004cfd 	.word	0x08004cfd
 8004d54:	08004ea5 	.word	0x08004ea5
 8004d58:	08004cfd 	.word	0x08004cfd
 8004d5c:	08004dab 	.word	0x08004dab
 8004d60:	08004cfd 	.word	0x08004cfd
 8004d64:	08004cfd 	.word	0x08004cfd
 8004d68:	08004e45 	.word	0x08004e45
 8004d6c:	6833      	ldr	r3, [r6, #0]
 8004d6e:	1d1a      	adds	r2, r3, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6032      	str	r2, [r6, #0]
 8004d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e09e      	b.n	8004ebe <_printf_i+0x1ea>
 8004d80:	6833      	ldr	r3, [r6, #0]
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	1d19      	adds	r1, r3, #4
 8004d86:	6031      	str	r1, [r6, #0]
 8004d88:	0606      	lsls	r6, r0, #24
 8004d8a:	d501      	bpl.n	8004d90 <_printf_i+0xbc>
 8004d8c:	681d      	ldr	r5, [r3, #0]
 8004d8e:	e003      	b.n	8004d98 <_printf_i+0xc4>
 8004d90:	0645      	lsls	r5, r0, #25
 8004d92:	d5fb      	bpl.n	8004d8c <_printf_i+0xb8>
 8004d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	da03      	bge.n	8004da4 <_printf_i+0xd0>
 8004d9c:	232d      	movs	r3, #45	@ 0x2d
 8004d9e:	426d      	negs	r5, r5
 8004da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da4:	230a      	movs	r3, #10
 8004da6:	4859      	ldr	r0, [pc, #356]	@ (8004f0c <_printf_i+0x238>)
 8004da8:	e011      	b.n	8004dce <_printf_i+0xfa>
 8004daa:	6821      	ldr	r1, [r4, #0]
 8004dac:	6833      	ldr	r3, [r6, #0]
 8004dae:	0608      	lsls	r0, r1, #24
 8004db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004db4:	d402      	bmi.n	8004dbc <_printf_i+0xe8>
 8004db6:	0649      	lsls	r1, r1, #25
 8004db8:	bf48      	it	mi
 8004dba:	b2ad      	uxthmi	r5, r5
 8004dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dbe:	6033      	str	r3, [r6, #0]
 8004dc0:	bf14      	ite	ne
 8004dc2:	230a      	movne	r3, #10
 8004dc4:	2308      	moveq	r3, #8
 8004dc6:	4851      	ldr	r0, [pc, #324]	@ (8004f0c <_printf_i+0x238>)
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dce:	6866      	ldr	r6, [r4, #4]
 8004dd0:	2e00      	cmp	r6, #0
 8004dd2:	bfa8      	it	ge
 8004dd4:	6821      	ldrge	r1, [r4, #0]
 8004dd6:	60a6      	str	r6, [r4, #8]
 8004dd8:	bfa4      	itt	ge
 8004dda:	f021 0104 	bicge.w	r1, r1, #4
 8004dde:	6021      	strge	r1, [r4, #0]
 8004de0:	b90d      	cbnz	r5, 8004de6 <_printf_i+0x112>
 8004de2:	2e00      	cmp	r6, #0
 8004de4:	d04b      	beq.n	8004e7e <_printf_i+0x1aa>
 8004de6:	4616      	mov	r6, r2
 8004de8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dec:	fb03 5711 	mls	r7, r3, r1, r5
 8004df0:	5dc7      	ldrb	r7, [r0, r7]
 8004df2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004df6:	462f      	mov	r7, r5
 8004df8:	42bb      	cmp	r3, r7
 8004dfa:	460d      	mov	r5, r1
 8004dfc:	d9f4      	bls.n	8004de8 <_printf_i+0x114>
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d10b      	bne.n	8004e1a <_printf_i+0x146>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	07df      	lsls	r7, r3, #31
 8004e06:	d508      	bpl.n	8004e1a <_printf_i+0x146>
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	6861      	ldr	r1, [r4, #4]
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	bfde      	ittt	le
 8004e10:	2330      	movle	r3, #48	@ 0x30
 8004e12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e16:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e1a:	1b92      	subs	r2, r2, r6
 8004e1c:	6122      	str	r2, [r4, #16]
 8004e1e:	464b      	mov	r3, r9
 8004e20:	4621      	mov	r1, r4
 8004e22:	4640      	mov	r0, r8
 8004e24:	f8cd a000 	str.w	sl, [sp]
 8004e28:	aa03      	add	r2, sp, #12
 8004e2a:	f7ff fee1 	bl	8004bf0 <_printf_common>
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d14a      	bne.n	8004ec8 <_printf_i+0x1f4>
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e36:	b004      	add	sp, #16
 8004e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	f043 0320 	orr.w	r3, r3, #32
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	2778      	movs	r7, #120	@ 0x78
 8004e46:	4832      	ldr	r0, [pc, #200]	@ (8004f10 <_printf_i+0x23c>)
 8004e48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	6831      	ldr	r1, [r6, #0]
 8004e50:	061f      	lsls	r7, r3, #24
 8004e52:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e56:	d402      	bmi.n	8004e5e <_printf_i+0x18a>
 8004e58:	065f      	lsls	r7, r3, #25
 8004e5a:	bf48      	it	mi
 8004e5c:	b2ad      	uxthmi	r5, r5
 8004e5e:	6031      	str	r1, [r6, #0]
 8004e60:	07d9      	lsls	r1, r3, #31
 8004e62:	bf44      	itt	mi
 8004e64:	f043 0320 	orrmi.w	r3, r3, #32
 8004e68:	6023      	strmi	r3, [r4, #0]
 8004e6a:	b11d      	cbz	r5, 8004e74 <_printf_i+0x1a0>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	e7ab      	b.n	8004dc8 <_printf_i+0xf4>
 8004e70:	4826      	ldr	r0, [pc, #152]	@ (8004f0c <_printf_i+0x238>)
 8004e72:	e7e9      	b.n	8004e48 <_printf_i+0x174>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	f023 0320 	bic.w	r3, r3, #32
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	e7f6      	b.n	8004e6c <_printf_i+0x198>
 8004e7e:	4616      	mov	r6, r2
 8004e80:	e7bd      	b.n	8004dfe <_printf_i+0x12a>
 8004e82:	6833      	ldr	r3, [r6, #0]
 8004e84:	6825      	ldr	r5, [r4, #0]
 8004e86:	1d18      	adds	r0, r3, #4
 8004e88:	6961      	ldr	r1, [r4, #20]
 8004e8a:	6030      	str	r0, [r6, #0]
 8004e8c:	062e      	lsls	r6, r5, #24
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	d501      	bpl.n	8004e96 <_printf_i+0x1c2>
 8004e92:	6019      	str	r1, [r3, #0]
 8004e94:	e002      	b.n	8004e9c <_printf_i+0x1c8>
 8004e96:	0668      	lsls	r0, r5, #25
 8004e98:	d5fb      	bpl.n	8004e92 <_printf_i+0x1be>
 8004e9a:	8019      	strh	r1, [r3, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4616      	mov	r6, r2
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	e7bc      	b.n	8004e1e <_printf_i+0x14a>
 8004ea4:	6833      	ldr	r3, [r6, #0]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	1d1a      	adds	r2, r3, #4
 8004eaa:	6032      	str	r2, [r6, #0]
 8004eac:	681e      	ldr	r6, [r3, #0]
 8004eae:	6862      	ldr	r2, [r4, #4]
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f000 f893 	bl	8004fdc <memchr>
 8004eb6:	b108      	cbz	r0, 8004ebc <_printf_i+0x1e8>
 8004eb8:	1b80      	subs	r0, r0, r6
 8004eba:	6060      	str	r0, [r4, #4]
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	6123      	str	r3, [r4, #16]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec6:	e7aa      	b.n	8004e1e <_printf_i+0x14a>
 8004ec8:	4632      	mov	r2, r6
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	47d0      	blx	sl
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d0ad      	beq.n	8004e32 <_printf_i+0x15e>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	d413      	bmi.n	8004f04 <_printf_i+0x230>
 8004edc:	68e0      	ldr	r0, [r4, #12]
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	4298      	cmp	r0, r3
 8004ee2:	bfb8      	it	lt
 8004ee4:	4618      	movlt	r0, r3
 8004ee6:	e7a6      	b.n	8004e36 <_printf_i+0x162>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4632      	mov	r2, r6
 8004eec:	4649      	mov	r1, r9
 8004eee:	4640      	mov	r0, r8
 8004ef0:	47d0      	blx	sl
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d09d      	beq.n	8004e32 <_printf_i+0x15e>
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	68e3      	ldr	r3, [r4, #12]
 8004efa:	9903      	ldr	r1, [sp, #12]
 8004efc:	1a5b      	subs	r3, r3, r1
 8004efe:	42ab      	cmp	r3, r5
 8004f00:	dcf2      	bgt.n	8004ee8 <_printf_i+0x214>
 8004f02:	e7eb      	b.n	8004edc <_printf_i+0x208>
 8004f04:	2500      	movs	r5, #0
 8004f06:	f104 0619 	add.w	r6, r4, #25
 8004f0a:	e7f5      	b.n	8004ef8 <_printf_i+0x224>
 8004f0c:	0800520f 	.word	0x0800520f
 8004f10:	08005220 	.word	0x08005220

08004f14 <__malloc_lock>:
 8004f14:	4801      	ldr	r0, [pc, #4]	@ (8004f1c <__malloc_lock+0x8>)
 8004f16:	f7ff bc6f 	b.w	80047f8 <__retarget_lock_acquire_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	20000318 	.word	0x20000318

08004f20 <__malloc_unlock>:
 8004f20:	4801      	ldr	r0, [pc, #4]	@ (8004f28 <__malloc_unlock+0x8>)
 8004f22:	f7ff bc6a 	b.w	80047fa <__retarget_lock_release_recursive>
 8004f26:	bf00      	nop
 8004f28:	20000318 	.word	0x20000318

08004f2c <_realloc_r>:
 8004f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f30:	4680      	mov	r8, r0
 8004f32:	4615      	mov	r5, r2
 8004f34:	460c      	mov	r4, r1
 8004f36:	b921      	cbnz	r1, 8004f42 <_realloc_r+0x16>
 8004f38:	4611      	mov	r1, r2
 8004f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3e:	f7ff bdd7 	b.w	8004af0 <_malloc_r>
 8004f42:	b92a      	cbnz	r2, 8004f50 <_realloc_r+0x24>
 8004f44:	f000 f866 	bl	8005014 <_free_r>
 8004f48:	2400      	movs	r4, #0
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f50:	f000 f8a8 	bl	80050a4 <_malloc_usable_size_r>
 8004f54:	4285      	cmp	r5, r0
 8004f56:	4606      	mov	r6, r0
 8004f58:	d802      	bhi.n	8004f60 <_realloc_r+0x34>
 8004f5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f5e:	d8f4      	bhi.n	8004f4a <_realloc_r+0x1e>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fdc4 	bl	8004af0 <_malloc_r>
 8004f68:	4607      	mov	r7, r0
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d0ec      	beq.n	8004f48 <_realloc_r+0x1c>
 8004f6e:	42b5      	cmp	r5, r6
 8004f70:	462a      	mov	r2, r5
 8004f72:	4621      	mov	r1, r4
 8004f74:	bf28      	it	cs
 8004f76:	4632      	movcs	r2, r6
 8004f78:	f000 f83e 	bl	8004ff8 <memcpy>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4640      	mov	r0, r8
 8004f80:	f000 f848 	bl	8005014 <_free_r>
 8004f84:	463c      	mov	r4, r7
 8004f86:	e7e0      	b.n	8004f4a <_realloc_r+0x1e>

08004f88 <memmove>:
 8004f88:	4288      	cmp	r0, r1
 8004f8a:	b510      	push	{r4, lr}
 8004f8c:	eb01 0402 	add.w	r4, r1, r2
 8004f90:	d902      	bls.n	8004f98 <memmove+0x10>
 8004f92:	4284      	cmp	r4, r0
 8004f94:	4623      	mov	r3, r4
 8004f96:	d807      	bhi.n	8004fa8 <memmove+0x20>
 8004f98:	1e43      	subs	r3, r0, #1
 8004f9a:	42a1      	cmp	r1, r4
 8004f9c:	d008      	beq.n	8004fb0 <memmove+0x28>
 8004f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fa6:	e7f8      	b.n	8004f9a <memmove+0x12>
 8004fa8:	4601      	mov	r1, r0
 8004faa:	4402      	add	r2, r0
 8004fac:	428a      	cmp	r2, r1
 8004fae:	d100      	bne.n	8004fb2 <memmove+0x2a>
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fba:	e7f7      	b.n	8004fac <memmove+0x24>

08004fbc <_sbrk_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4d05      	ldr	r5, [pc, #20]	@ (8004fd8 <_sbrk_r+0x1c>)
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	f7fb ff34 	bl	8000e34 <_sbrk>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_sbrk_r+0x1a>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_sbrk_r+0x1a>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20000324 	.word	0x20000324

08004fdc <memchr>:
 8004fdc:	4603      	mov	r3, r0
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	b2c9      	uxtb	r1, r1
 8004fe2:	4402      	add	r2, r0
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	d101      	bne.n	8004fee <memchr+0x12>
 8004fea:	2000      	movs	r0, #0
 8004fec:	e003      	b.n	8004ff6 <memchr+0x1a>
 8004fee:	7804      	ldrb	r4, [r0, #0]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	428c      	cmp	r4, r1
 8004ff4:	d1f6      	bne.n	8004fe4 <memchr+0x8>
 8004ff6:	bd10      	pop	{r4, pc}

08004ff8 <memcpy>:
 8004ff8:	440a      	add	r2, r1
 8004ffa:	4291      	cmp	r1, r2
 8004ffc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005000:	d100      	bne.n	8005004 <memcpy+0xc>
 8005002:	4770      	bx	lr
 8005004:	b510      	push	{r4, lr}
 8005006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800500a:	4291      	cmp	r1, r2
 800500c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005010:	d1f9      	bne.n	8005006 <memcpy+0xe>
 8005012:	bd10      	pop	{r4, pc}

08005014 <_free_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4605      	mov	r5, r0
 8005018:	2900      	cmp	r1, #0
 800501a:	d040      	beq.n	800509e <_free_r+0x8a>
 800501c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005020:	1f0c      	subs	r4, r1, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	bfb8      	it	lt
 8005026:	18e4      	addlt	r4, r4, r3
 8005028:	f7ff ff74 	bl	8004f14 <__malloc_lock>
 800502c:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <_free_r+0x8c>)
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	b933      	cbnz	r3, 8005040 <_free_r+0x2c>
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	6014      	str	r4, [r2, #0]
 8005036:	4628      	mov	r0, r5
 8005038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800503c:	f7ff bf70 	b.w	8004f20 <__malloc_unlock>
 8005040:	42a3      	cmp	r3, r4
 8005042:	d908      	bls.n	8005056 <_free_r+0x42>
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	1821      	adds	r1, r4, r0
 8005048:	428b      	cmp	r3, r1
 800504a:	bf01      	itttt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	1809      	addeq	r1, r1, r0
 8005052:	6021      	streq	r1, [r4, #0]
 8005054:	e7ed      	b.n	8005032 <_free_r+0x1e>
 8005056:	461a      	mov	r2, r3
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	b10b      	cbz	r3, 8005060 <_free_r+0x4c>
 800505c:	42a3      	cmp	r3, r4
 800505e:	d9fa      	bls.n	8005056 <_free_r+0x42>
 8005060:	6811      	ldr	r1, [r2, #0]
 8005062:	1850      	adds	r0, r2, r1
 8005064:	42a0      	cmp	r0, r4
 8005066:	d10b      	bne.n	8005080 <_free_r+0x6c>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	4401      	add	r1, r0
 800506c:	1850      	adds	r0, r2, r1
 800506e:	4283      	cmp	r3, r0
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	d1e0      	bne.n	8005036 <_free_r+0x22>
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4408      	add	r0, r1
 800507a:	6010      	str	r0, [r2, #0]
 800507c:	6053      	str	r3, [r2, #4]
 800507e:	e7da      	b.n	8005036 <_free_r+0x22>
 8005080:	d902      	bls.n	8005088 <_free_r+0x74>
 8005082:	230c      	movs	r3, #12
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	e7d6      	b.n	8005036 <_free_r+0x22>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	1821      	adds	r1, r4, r0
 800508c:	428b      	cmp	r3, r1
 800508e:	bf01      	itttt	eq
 8005090:	6819      	ldreq	r1, [r3, #0]
 8005092:	685b      	ldreq	r3, [r3, #4]
 8005094:	1809      	addeq	r1, r1, r0
 8005096:	6021      	streq	r1, [r4, #0]
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	6054      	str	r4, [r2, #4]
 800509c:	e7cb      	b.n	8005036 <_free_r+0x22>
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	20000320 	.word	0x20000320

080050a4 <_malloc_usable_size_r>:
 80050a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a8:	1f18      	subs	r0, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bfbc      	itt	lt
 80050ae:	580b      	ldrlt	r3, [r1, r0]
 80050b0:	18c0      	addlt	r0, r0, r3
 80050b2:	4770      	bx	lr

080050b4 <_init>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr

080050c0 <_fini>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr
